{"version":3,"file":"static/js/324.566861ee.chunk.js","mappings":"qHAqBAA,EAAQ,GAZR,SAAoBC,GAChB,CACI,MAAMC,EAAWC,EAAOC,KAAKH,GAC7BC,EAASG,UACT,MAAMC,EAAMJ,EAASK,SAAS,OAC9B,OAAmB,IAAfD,EAAIE,OACGC,OAAO,GAEXA,OAAO,KAADC,OAAMJ,GACvB,CAEJ,EAiBAN,EAAQ,GAVR,SAAoBC,GAChB,CACI,MAAMK,EAAML,EAAIM,SAAS,OACzB,OAAmB,IAAfD,EAAIE,OACGC,OAAO,GAEXA,OAAO,KAADC,OAAMJ,GACvB,CAEJ,EAkBAN,EAAQ,GAVR,SAAoBW,EAAKC,GACrB,CACI,MAAMN,EAAMK,EAAIJ,SAAS,IACnBM,EAASV,EAAOC,KAAKE,EAAIQ,SAAiB,EAARF,EAAW,KAAKG,MAAM,EAAW,EAARH,GAAY,OAE7E,OADAC,EAAOR,UACAQ,CACX,CAGJ,EAeAb,EAAQ,GAPR,SAAoBW,EAAKC,GACrB,CACI,MAAMN,EAAMK,EAAIJ,SAAS,IACzB,OAAOJ,EAAOC,KAAKE,EAAIQ,SAAiB,EAARF,EAAW,KAAKG,MAAM,EAAW,EAARH,GAAY,MACzE,CAEJ,C,8VClEM,MAAgBI,UAAmBC,MACrCC,WAAAA,CAAYC,GACRC,MAAMD,EACV,EAIE,MAAOE,UAAkCL,EAA/CE,WAAAA,G,oBACI,KAAAI,KAAO,2BACX,EAGM,MAAOC,UAAiCP,EAA9CE,WAAAA,G,oBACI,KAAAI,KAAO,0BACX,EAQM,MAAOE,UAAsCR,EAAnDE,WAAAA,G,oBACI,KAAAI,KAAO,+BACX,EAGM,MAAOG,UAAqCT,EAAlDE,WAAAA,G,oBACI,KAAAI,KAAO,8BACX,EAGM,MAAOI,UAA8BV,EAA3CE,WAAAA,G,oBACI,KAAAI,KAAO,uBACX,EAGM,MAAOK,UAA+BX,EAA5CE,WAAAA,G,oBACI,KAAAI,KAAO,wBACX,EAGM,MAAOM,UAAgCZ,EAA7CE,WAAAA,G,oBACI,KAAAI,KAAO,yBACX,E,oBC5BM,SAAUO,EACZC,EACAC,EACAC,EACAC,GAEsD,IADtDC,EAASC,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAGE,EAAAA,GACZC,EAAwBH,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAGI,EAAAA,GAE3B,OAAOC,EACHV,EACAC,EACAC,EACAC,EACA9B,EAAOsC,MAAM,GACbP,EACAI,EAER,CAiEA,SAASE,EACLV,EACAC,EACAC,EACAC,EACAS,GAEsD,IADtDR,EAASC,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAGE,EAAAA,GACZC,EAAwBH,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAGI,EAAAA,GAE3B,MAAMI,EAAO,CACT,CAAEC,OAAQd,EAAOe,UAAU,EAAMC,YAAY,GAC7C,CAAEF,OAAQb,EAAiBc,UAAU,EAAOC,YAAY,GACxD,CAAEF,OAAQZ,EAAOa,UAAU,EAAOC,YAAY,GAC9C,CAAEF,OAAQX,EAAMY,UAAU,EAAOC,YAAY,GAC7C,CAAEF,OAAQG,EAAAA,GAAcb,UAAWW,UAAU,EAAOC,YAAY,GAChE,CAAEF,OAAQV,EAAWW,UAAU,EAAOC,YAAY,IAGtD,OAAO,IAAIE,EAAAA,GAAuB,CAC9BL,OACAT,UAAWI,EACXW,KAAMP,GAEd,C,qBCnHO,MAAMQ,EAAmBC,IAGrB,CAAEC,OAFMD,EAAOC,OAAOC,KAAKF,GAEjBG,OADFH,EAAOG,OAAOD,KAAKF,K,oBCL/B,MAAMI,EACR/C,GACAgD,IACG,MAAML,GAASM,EAAAA,EAAAA,IAAKjD,EAAQgD,IACtB,OAAEF,EAAM,OAAEF,GAAWF,EAAaC,GAElCO,EAAeP,EAYrB,OAVAO,EAAaN,OAAS,CAACvC,EAAgB8C,KACnC,MAAMC,EAAMR,EAAOvC,EAAQ8C,GAC3B,OAAOE,EAAAA,EAAAA,IAAW1D,EAAOC,KAAKwD,KAGlCF,EAAaJ,OAAS,CAACC,EAAgB1C,EAAgB8C,KACnD,MAAMC,GAAME,EAAAA,EAAAA,IAAWP,EAAQ/C,GAC/B,OAAO8C,EAAOM,EAAK/C,EAAQ8C,IAGxBD,GAGFK,EACRvD,GACAgD,IACG,MAAML,GAASM,EAAAA,EAAAA,IAAKjD,EAAQgD,IACtB,OAAEF,EAAM,OAAEF,GAAWF,EAAaC,GAElCO,EAAeP,EAYrB,OAVAO,EAAaN,OAAS,CAACvC,EAAgB8C,KACnC,MAAMC,EAAMR,EAAOvC,EAAQ8C,GAC3B,OAAOK,EAAAA,EAAAA,IAAW7D,EAAOC,KAAKwD,KAGlCF,EAAaJ,OAAS,CAACC,EAAgB1C,EAAgB8C,KACnD,MAAMC,GAAMK,EAAAA,EAAAA,IAAWV,EAAQ/C,GAC/B,OAAO8C,EAAOM,EAAK/C,EAAQ8C,IAGxBD,GAGFQ,EAAMX,EAAO,GAELQ,EAAS,GAEVR,EAAO,IAELQ,EAAS,IAEXR,EAAO,IAELQ,EAAS,IAEXR,EAAO,IAELQ,EAAS,ICZ/B,IACEI,EAAY,6CACZC,EAAWC,KAAKC,KAChBC,EAAYF,KAAKG,MAEjBC,EAAiB,qBACjBC,EAAgBD,EAAiB,yDAEjCE,EAAO,KACPC,EAAW,GACXC,EAAmB,iBAEnBC,EAAW,CAAC,EAAG,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,MAC7EC,EAAY,IAKZC,EAAM,IA0pFR,SAASC,EAASC,GAChB,IAAIC,EAAQ,EAAJD,EACR,OAAOA,EAAI,GAAKA,IAAMC,EAAIA,EAAIA,EAAI,CACpC,CAIA,SAASC,EAAcC,GAMrB,IALA,IAAIC,EAAGC,EACLJ,EAAI,EACJK,EAAIH,EAAE7E,OACNiF,EAAIJ,EAAE,GAAK,GAENF,EAAIK,GAAI,CAGb,IAFAF,EAAID,EAAEF,KAAO,GACbI,EAAIX,EAAWU,EAAE9E,OACV+E,IAAKD,EAAI,IAAMA,GACtBG,GAAKH,CACP,CAGA,IAAKE,EAAIC,EAAEjF,OAA8B,KAAtBiF,EAAEC,aAAaF,KAElC,OAAOC,EAAE1E,MAAM,EAAGyE,EAAI,GAAK,EAC7B,CAIA,SAASG,EAAQC,EAAGC,GAClB,IAAIR,EAAGS,EACLC,EAAKH,EAAEI,EACPC,EAAKJ,EAAEG,EACPb,EAAIS,EAAEN,EACNE,EAAIK,EAAEP,EACNY,EAAIN,EAAEO,EACNC,EAAIP,EAAEM,EAGR,IAAKhB,IAAMK,EAAG,OAAO,KAMrB,GAJAH,EAAIU,IAAOA,EAAG,GACdD,EAAIG,IAAOA,EAAG,GAGVZ,GAAKS,EAAG,OAAOT,EAAIS,EAAI,GAAKN,EAAIL,EAGpC,GAAIA,GAAKK,EAAG,OAAOL,EAMnB,GAJAE,EAAIF,EAAI,EACRW,EAAII,GAAKE,GAGJL,IAAOE,EAAI,OAAOH,EAAI,GAAKC,EAAKV,EAAI,GAAK,EAG9C,IAAKS,EAAG,OAAOI,EAAIE,EAAIf,EAAI,GAAK,EAKhC,IAHAG,GAAKU,EAAIH,EAAGvF,SAAW4F,EAAIH,EAAGzF,QAAU0F,EAAIE,EAGvCjB,EAAI,EAAGA,EAAIK,EAAGL,IAAK,GAAIY,EAAGZ,IAAMc,EAAGd,GAAI,OAAOY,EAAGZ,GAAKc,EAAGd,GAAKE,EAAI,GAAK,EAG5E,OAAOa,GAAKE,EAAI,EAAIF,EAAIE,EAAIf,EAAI,GAAK,CACvC,CAMA,SAASgB,EAASnB,EAAGoB,EAAKC,EAAKjF,GAC7B,GAAI4D,EAAIoB,GAAOpB,EAAIqB,GAAOrB,IAAMX,EAAUW,GACxC,MAAMjE,MACJwD,GAAkBnD,GAAQ,aAA2B,iBAAL4D,EAC7CA,EAAIoB,GAAOpB,EAAIqB,EAAM,kBAAoB,oBACzC,6BAA+BC,OAAOtB,GAE/C,CAIA,SAASuB,EAAMvB,GACb,IAAIgB,EAAIhB,EAAEc,EAAExF,OAAS,EACrB,OAAOyE,EAASC,EAAEiB,EAAIvB,IAAasB,GAAKhB,EAAEc,EAAEE,GAAK,GAAK,CACxD,CAGA,SAASQ,EAAcC,EAAKR,GAC1B,OAAQQ,EAAInG,OAAS,EAAImG,EAAIC,OAAO,GAAK,IAAMD,EAAI5F,MAAM,GAAK4F,IAC5DR,EAAI,EAAI,IAAM,MAAQA,CAC1B,CAGA,SAASU,EAAaF,EAAKR,EAAGZ,GAC5B,IAAIuB,EAAKC,EAGT,GAAIZ,EAAI,EAAG,CAGT,IAAKY,EAAKxB,EAAI,MAAOY,EAAGY,GAAMxB,GAC9BoB,EAAMI,EAAKJ,CAGb,MAIE,KAAMR,GAHNW,EAAMH,EAAInG,QAGK,CACb,IAAKuG,EAAKxB,EAAGY,GAAKW,IAAOX,EAAGY,GAAMxB,GAClCoB,GAAOI,CACT,MAAWZ,EAAIW,IACbH,EAAMA,EAAI5F,MAAM,EAAGoF,GAAK,IAAMQ,EAAI5F,MAAMoF,IAI5C,OAAOQ,CACT,CAMO,IAAIK,EAhxFX,SAASC,EAAMC,GACb,IAAIC,EAAKC,EAAaC,EACpBC,EAAIN,EAAUO,UAAY,CAAErG,YAAa8F,EAAWzG,SAAU,KAAMiH,QAAS,MAC7EC,EAAM,IAAIT,EAAU,GAUpBU,EAAiB,GAajBC,EAAgB,EAMhBC,GAAc,EAIdC,EAAa,GAMbC,GAAW,IAKXC,EAAU,IAGVC,GAAS,EAkBTC,EAAc,EAIdC,EAAgB,EAGhBC,EAAS,CACPC,OAAQ,GACRC,UAAW,EACXC,mBAAoB,EACpBC,eAAgB,IAChBC,iBAAkB,IAClBC,kBAAmB,EACnBC,uBAAwB,OACxBC,OAAQ,IAMVC,EAAW,uCACXC,GAAiC,EAgBnC,SAAS7B,EAAU8B,EAAGhD,GACpB,IAAIiD,EAAU/C,EAAGgD,EAAa7C,EAAGhB,EAAG8D,EAAOnC,EAAKH,EAC9Cf,EAAIsD,KAGN,KAAMtD,aAAaoB,GAAY,OAAO,IAAIA,EAAU8B,EAAGhD,GAEvD,GAAS,MAALA,EAAW,CAEb,GAAIgD,IAAwB,IAAnBA,EAAEK,aAYT,OAXAvD,EAAEN,EAAIwD,EAAExD,QAEHwD,EAAE9C,GAAK8C,EAAE3C,EAAI4B,EAChBnC,EAAEI,EAAIJ,EAAEO,EAAI,KACH2C,EAAE3C,EAAI2B,EACflC,EAAEI,EAAI,CAACJ,EAAEO,EAAI,IAEbP,EAAEO,EAAI2C,EAAE3C,EACRP,EAAEI,EAAI8C,EAAE9C,EAAEjF,UAMd,IAAKkI,EAAoB,iBAALH,IAAsB,EAAJA,GAAS,EAAG,CAMhD,GAHAlD,EAAEN,EAAI,EAAIwD,EAAI,GAAKA,GAAKA,GAAI,GAAK,EAG7BA,MAAQA,EAAG,CACb,IAAK3C,EAAI,EAAGhB,EAAI2D,EAAG3D,GAAK,GAAIA,GAAK,GAAIgB,KASrC,YAPIA,EAAI4B,EACNnC,EAAEI,EAAIJ,EAAEO,EAAI,MAEZP,EAAEO,EAAIA,EACNP,EAAEI,EAAI,CAAC8C,IAIX,CAEAnC,EAAMH,OAAOsC,EACf,KAAO,CAEL,IAAK3E,EAAUiF,KAAKzC,EAAMH,OAAOsC,IAAK,OAAOzB,EAAazB,EAAGe,EAAKsC,GAElErD,EAAEN,EAAyB,IAArBqB,EAAIjB,WAAW,IAAYiB,EAAMA,EAAI5F,MAAM,IAAK,GAAK,CAC7D,EAGKoF,EAAIQ,EAAI0C,QAAQ,OAAS,IAAG1C,EAAMA,EAAI2C,QAAQ,IAAK,MAGnDnE,EAAIwB,EAAI4C,OAAO,OAAS,GAGvBpD,EAAI,IAAGA,EAAIhB,GACfgB,IAAMQ,EAAI5F,MAAMoE,EAAI,GACpBwB,EAAMA,EAAI6C,UAAU,EAAGrE,IACdgB,EAAI,IAGbA,EAAIQ,EAAInG,OAGZ,KAAO,CAOL,GAJA6F,EAASP,EAAG,EAAG8C,EAASpI,OAAQ,QAIvB,IAALsF,GAAW+C,EAEb,OAAOY,EADP7D,EAAI,IAAIoB,EAAU8B,GACFpB,EAAiB9B,EAAEO,EAAI,EAAGwB,GAK5C,GAFAhB,EAAMH,OAAOsC,GAETG,EAAoB,iBAALH,EAAe,CAGhC,GAAQ,EAAJA,GAAS,EAAG,OAAOzB,EAAazB,EAAGe,EAAKsC,EAAOnD,GAKnD,GAHAF,EAAEN,EAAI,EAAIwD,EAAI,GAAKnC,EAAMA,EAAI5F,MAAM,IAAK,GAAK,EAGzCiG,EAAU0C,OAAS/C,EAAI2C,QAAQ,YAAa,IAAI9I,OAAS,GAC3D,MAAMS,MACJyD,EAAgBoE,EAEtB,MACElD,EAAEN,EAA0B,KAAtBqB,EAAIjB,WAAW,IAAaiB,EAAMA,EAAI5F,MAAM,IAAK,GAAK,EAQ9D,IALAgI,EAAWH,EAAS7H,MAAM,EAAG+E,GAC7BK,EAAIhB,EAAI,EAIH2B,EAAMH,EAAInG,OAAQ2E,EAAI2B,EAAK3B,IAC9B,GAAI4D,EAASM,QAAQrD,EAAIW,EAAIC,OAAOzB,IAAM,EAAG,CAC3C,GAAS,KAALa,GAGF,GAAIb,EAAIgB,EAAG,CACTA,EAAIW,EACJ,QACF,OACK,IAAKkC,IAGNrC,GAAOA,EAAIgD,gBAAkBhD,EAAMA,EAAIiD,gBACvCjD,GAAOA,EAAIiD,gBAAkBjD,EAAMA,EAAIgD,gBAAgB,CACzDX,GAAc,EACd7D,GAAK,EACLgB,EAAI,EACJ,QACF,CAGF,OAAOkB,EAAazB,EAAGY,OAAOsC,GAAIG,EAAOnD,EAC3C,CAIFmD,GAAQ,GAIH9C,GAHLQ,EAAMS,EAAYT,EAAKb,EAAG,GAAIF,EAAEN,IAGnB+D,QAAQ,OAAS,EAAG1C,EAAMA,EAAI2C,QAAQ,IAAK,IACnDnD,EAAIQ,EAAInG,MACf,CAGA,IAAK2E,EAAI,EAAyB,KAAtBwB,EAAIjB,WAAWP,GAAWA,KAGtC,IAAK2B,EAAMH,EAAInG,OAAkC,KAA1BmG,EAAIjB,aAAaoB,KAExC,GAAIH,EAAMA,EAAI5F,MAAMoE,IAAK2B,GAAM,CAI7B,GAHAA,GAAO3B,EAGH8D,GAASjC,EAAU0C,OACrB5C,EAAM,KAAOgC,EAAIjE,GAAoBiE,IAAMvE,EAAUuE,IACnD,MAAM7H,MACJyD,EAAiBkB,EAAEN,EAAIwD,GAI7B,IAAK3C,EAAIA,EAAIhB,EAAI,GAAK4C,EAGpBnC,EAAEI,EAAIJ,EAAEO,EAAI,UAGP,GAAIA,EAAI2B,EAGblC,EAAEI,EAAI,CAACJ,EAAEO,EAAI,OACR,CAWL,GAVAP,EAAEO,EAAIA,EACNP,EAAEI,EAAI,GAMNb,GAAKgB,EAAI,GAAKvB,EACVuB,EAAI,IAAGhB,GAAKP,GAEZO,EAAI2B,EAAK,CAGX,IAFI3B,GAAGS,EAAEI,EAAE6D,MAAMlD,EAAI5F,MAAM,EAAGoE,IAEzB2B,GAAOlC,EAAUO,EAAI2B,GACxBlB,EAAEI,EAAE6D,MAAMlD,EAAI5F,MAAMoE,EAAGA,GAAKP,IAG9BO,EAAIP,GAAY+B,EAAMA,EAAI5F,MAAMoE,IAAI3E,MACtC,MACE2E,GAAK2B,EAGP,KAAO3B,IAAKwB,GAAO,KACnBf,EAAEI,EAAE6D,MAAMlD,EACZ,CACF,MAGEf,EAAEI,EAAI,CAACJ,EAAEO,EAAI,EAEjB,CA21BA,SAAS2D,EAAO5E,EAAGC,EAAG4E,EAAIC,GACxB,IAAIC,EAAI9D,EAAG+D,EAAIpD,EAAKH,EAKpB,GAHU,MAANoD,EAAYA,EAAKpC,EAChBtB,EAAS0D,EAAI,EAAG,IAEhB7E,EAAEc,EAAG,OAAOd,EAAE3E,WAKnB,GAHA0J,EAAK/E,EAAEc,EAAE,GACTkE,EAAKhF,EAAEiB,EAEE,MAALhB,EACFwB,EAAMvB,EAAcF,EAAEc,GACtBW,EAAY,GAANqD,GAAiB,GAANA,IAAYE,GAAMtC,GAAcsC,GAAMrC,GACpDnB,EAAcC,EAAKuD,GACnBrD,EAAaF,EAAKuD,EAAI,UAezB,GAVA/D,GAHAjB,EAAIuE,EAAM,IAAIzC,EAAU9B,GAAIC,EAAG4E,IAGzB5D,EAGNW,GADAH,EAAMvB,EAAcF,EAAEc,IACZxF,OAOA,GAANwJ,GAAiB,GAANA,IAAY7E,GAAKgB,GAAKA,GAAKyB,GAAa,CAGrD,KAAOd,EAAM3B,EAAGwB,GAAO,IAAKG,KAC5BH,EAAMD,EAAcC,EAAKR,EAG3B,MAKE,GAJAhB,GAAK+E,GAAa,IAAPF,GAAY7D,EAAI+D,GAC3BvD,EAAME,EAAaF,EAAKR,EAAG,KAGvBA,EAAI,EAAIW,GACV,KAAM3B,EAAI,EAAG,IAAKwB,GAAO,IAAKxB,IAAKwB,GAAO,WAG1C,IADAxB,GAAKgB,EAAIW,GACD,EAEN,IADIX,EAAI,GAAKW,IAAKH,GAAO,KAClBxB,IAAKwB,GAAO,KAM3B,OAAOzB,EAAEI,EAAI,GAAK2E,EAAK,IAAMtD,EAAMA,CACrC,CAKA,SAASwD,EAASC,EAAMlF,GAKtB,IAJA,IAAIgB,EAAGL,EACLV,EAAI,EACJS,EAAI,IAAIoB,EAAUoD,EAAK,IAElBjF,EAAIiF,EAAK5J,OAAQ2E,OACtBU,EAAI,IAAImB,EAAUoD,EAAKjF,KAChBG,IAAMY,EAAIP,EAAQC,EAAGC,MAAQX,GAAW,IAANgB,GAAWN,EAAEN,IAAMJ,KAC1DU,EAAIC,GAIR,OAAOD,CACT,CAOA,SAASyE,EAAUnF,EAAGc,EAAGG,GAKvB,IAJA,IAAIhB,EAAI,EACNK,EAAIQ,EAAExF,QAGAwF,IAAIR,GAAIQ,EAAEsE,OAGlB,IAAK9E,EAAIQ,EAAE,GAAIR,GAAK,GAAIA,GAAK,GAAIL,KAkBjC,OAfKgB,EAAIhB,EAAIgB,EAAIvB,EAAW,GAAKmD,EAG/B7C,EAAEc,EAAId,EAAEiB,EAAI,KAGHA,EAAI2B,EAGb5C,EAAEc,EAAI,CAACd,EAAEiB,EAAI,IAEbjB,EAAEiB,EAAIA,EACNjB,EAAEc,EAAIA,GAGDd,CACT,CAyDA,SAASuE,EAAM7D,EAAG2E,EAAIR,EAAItE,GACxB,IAAI+E,EAAGrF,EAAGK,EAAGU,EAAGhB,EAAGuF,EAAIC,EACrB3E,EAAKH,EAAEI,EACP2E,EAAS7F,EAGX,GAAIiB,EAAI,CAQN6E,EAAK,CAGH,IAAKJ,EAAI,EAAGtE,EAAIH,EAAG,GAAIG,GAAK,GAAIA,GAAK,GAAIsE,KAIzC,IAHArF,EAAIoF,EAAKC,GAGD,EACNrF,GAAKP,EACLY,EAAI+E,EACJrF,EAAIa,EAAG0E,EAAK,GAGZC,EAAKnG,EAAUW,EAAIyF,EAAOH,EAAIhF,EAAI,GAAK,SAIvC,IAFAiF,EAAKrG,GAAUe,EAAI,GAAKP,KAEdmB,EAAGvF,OAAQ,CAEnB,IAAIiF,EASF,MAAMmF,EANN,KAAO7E,EAAGvF,QAAUiK,EAAI1E,EAAG8D,KAAK,IAChC3E,EAAIwF,EAAK,EACTF,EAAI,EAEJhF,GADAL,GAAKP,GACGA,EAAW,CAIvB,KAAO,CAIL,IAHAM,EAAIgB,EAAIH,EAAG0E,GAGND,EAAI,EAAGtE,GAAK,GAAIA,GAAK,GAAIsE,KAU9BE,GAHAlF,GAJAL,GAAKP,GAIGA,EAAW4F,GAGV,EAAI,EAAIjG,EAAUW,EAAIyF,EAAOH,EAAIhF,EAAI,GAAK,GACrD,CAkBF,GAfAC,EAAIA,GAAK8E,EAAK,GAKC,MAAdxE,EAAG0E,EAAK,KAAejF,EAAI,EAAIN,EAAIA,EAAIyF,EAAOH,EAAIhF,EAAI,IAEvDC,EAAIsE,EAAK,GACLW,GAAMjF,KAAa,GAANsE,GAAWA,IAAOnE,EAAEN,EAAI,EAAI,EAAI,IAC9CoF,EAAK,GAAW,GAANA,IAAkB,GAANX,GAAWtE,GAAW,GAANsE,IAGrC5E,EAAI,EAAIK,EAAI,EAAIN,EAAIyF,EAAOH,EAAIhF,GAAK,EAAIO,EAAG0E,EAAK,IAAM,GAAM,GAC7DV,IAAOnE,EAAEN,EAAI,EAAI,EAAI,IAEpBiF,EAAK,IAAMxE,EAAG,GAiBhB,OAhBAA,EAAGvF,OAAS,EAERiF,GAGF8E,GAAM3E,EAAEO,EAAI,EAGZJ,EAAG,GAAK4E,GAAQ/F,EAAW2F,EAAK3F,GAAYA,GAC5CgB,EAAEO,GAAKoE,GAAM,GAIbxE,EAAG,GAAKH,EAAEO,EAAI,EAGTP,EAkBT,GAdS,GAALT,GACFY,EAAGvF,OAASiK,EACZvE,EAAI,EACJuE,MAEA1E,EAAGvF,OAASiK,EAAK,EACjBvE,EAAIyE,EAAO/F,EAAWO,GAItBY,EAAG0E,GAAMjF,EAAI,EAAIjB,EAAUW,EAAIyF,EAAOH,EAAIhF,GAAKmF,EAAOnF,IAAMU,EAAI,GAI9DT,EAEF,OAAU,CAGR,GAAU,GAANgF,EAAS,CAGX,IAAKtF,EAAI,EAAGK,EAAIO,EAAG,GAAIP,GAAK,GAAIA,GAAK,GAAIL,KAEzC,IADAK,EAAIO,EAAG,IAAMG,EACRA,EAAI,EAAGV,GAAK,GAAIA,GAAK,GAAIU,KAG1Bf,GAAKe,IACPN,EAAEO,IACEJ,EAAG,IAAMpB,IAAMoB,EAAG,GAAK,IAG7B,KACF,CAEE,GADAA,EAAG0E,IAAOvE,EACNH,EAAG0E,IAAO9F,EAAM,MACpBoB,EAAG0E,KAAQ,EACXvE,EAAI,CAER,CAIF,IAAKf,EAAIY,EAAGvF,OAAoB,IAAZuF,IAAKZ,GAAUY,EAAGuE,OACxC,CAGI1E,EAAEO,EAAI4B,EACRnC,EAAEI,EAAIJ,EAAEO,EAAI,KAGHP,EAAEO,EAAI2B,IACflC,EAAEI,EAAI,CAACJ,EAAEO,EAAI,GAEjB,CAEA,OAAOP,CACT,CAGA,SAAS4B,EAAQtC,GACf,IAAIyB,EACFR,EAAIjB,EAAEiB,EAER,OAAU,OAANA,EAAmBjB,EAAE3E,YAEzBoG,EAAMvB,EAAcF,EAAEc,GAEtBW,EAAMR,GAAKyB,GAAczB,GAAK0B,EAC1BnB,EAAcC,EAAKR,GACnBU,EAAaF,EAAKR,EAAG,KAElBjB,EAAEI,EAAI,EAAI,IAAMqB,EAAMA,EAC/B,CAorCA,OAx1EAK,EAAUC,MAAQA,EAElBD,EAAU6D,SAAW,EACrB7D,EAAU8D,WAAa,EACvB9D,EAAU+D,WAAa,EACvB/D,EAAUgE,YAAc,EACxBhE,EAAUiE,cAAgB,EAC1BjE,EAAUkE,gBAAkB,EAC5BlE,EAAUmE,gBAAkB,EAC5BnE,EAAUoE,gBAAkB,EAC5BpE,EAAUqE,iBAAmB,EAC7BrE,EAAUsE,OAAS,EAqCnBtE,EAAUuE,OAASvE,EAAUwE,IAAM,SAAUC,GAC3C,IAAIC,EAAG5C,EAEP,GAAW,MAAP2C,EAAa,CAEf,GAAkB,iBAAPA,EA4HT,MAAMxK,MACJwD,EAAiB,oBAAsBgH,GAvFzC,GAlCIA,EAAIE,eAAeD,EAAI,oBAEzBrF,EADAyC,EAAI2C,EAAIC,GACI,EAAG1G,EAAK0G,GACpBhE,EAAiBoB,GAKf2C,EAAIE,eAAeD,EAAI,mBAEzBrF,EADAyC,EAAI2C,EAAIC,GACI,EAAG,EAAGA,GAClB/D,EAAgBmB,GAOd2C,EAAIE,eAAeD,EAAI,qBACzB5C,EAAI2C,EAAIC,KACC5C,EAAEwB,KACTjE,EAASyC,EAAE,IAAK9D,EAAK,EAAG0G,GACxBrF,EAASyC,EAAE,GAAI,EAAG9D,EAAK0G,GACvB9D,EAAakB,EAAE,GACfjB,EAAaiB,EAAE,KAEfzC,EAASyC,GAAI9D,EAAKA,EAAK0G,GACvB9D,IAAeC,EAAaiB,EAAI,GAAKA,EAAIA,KAOzC2C,EAAIE,eAAeD,EAAI,SAEzB,IADA5C,EAAI2C,EAAIC,KACC5C,EAAEwB,IACTjE,EAASyC,EAAE,IAAK9D,GAAM,EAAG0G,GACzBrF,EAASyC,EAAE,GAAI,EAAG9D,EAAK0G,GACvB5D,EAAUgB,EAAE,GACZf,EAAUe,EAAE,OACP,CAEL,GADAzC,EAASyC,GAAI9D,EAAKA,EAAK0G,IACnB5C,EAGF,MAAM7H,MACJwD,EAAiBiH,EAAI,oBAAsB5C,GAH7ChB,IAAYC,EAAUe,EAAI,GAAKA,EAAIA,EAKvC,CAMF,GAAI2C,EAAIE,eAAeD,EAAI,UAAW,CAEpC,IADA5C,EAAI2C,EAAIC,QACI5C,EAcV,MAAM7H,MACJwD,EAAiBiH,EAAI,uBAAyB5C,GAdhD,GAAIA,EAAG,CACL,GAAqB,oBAAV8C,SAAyBA,SAClCA,OAAOC,kBAAmBD,OAAOE,YAIjC,MADA9D,GAAUc,EACJ7H,MACJwD,EAAiB,sBAJnBuD,EAASc,CAMb,MACEd,EAASc,CAMf,CAoBA,GAhBI2C,EAAIE,eAAeD,EAAI,iBAEzBrF,EADAyC,EAAI2C,EAAIC,GACI,EAAG,EAAGA,GAClBzD,EAAca,GAKZ2C,EAAIE,eAAeD,EAAI,mBAEzBrF,EADAyC,EAAI2C,EAAIC,GACI,EAAG1G,EAAK0G,GACpBxD,EAAgBY,GAKd2C,EAAIE,eAAeD,EAAI,UAAW,CAEpC,GAAgB,iBADhB5C,EAAI2C,EAAIC,IAEH,MAAMzK,MACTwD,EAAiBiH,EAAI,mBAAqB5C,GAFlBX,EAASW,CAGrC,CAIA,GAAI2C,EAAIE,eAAeD,EAAI,YAAa,CAKtC,GAAgB,iBAJhB5C,EAAI2C,EAAIC,KAIqB,wBAAwBtC,KAAKN,GAIxD,MAAM7H,MACJwD,EAAiBiH,EAAI,aAAe5C,GAJtCD,EAAmD,cAAlBC,EAAE/H,MAAM,EAAG,IAC5C6H,EAAWE,CAKf,CAQJ,CAEA,MAAO,CACLpB,eAAgBA,EAChBC,cAAeA,EACfoE,eAAgB,CAACnE,EAAYC,GAC7BmE,MAAO,CAAClE,EAASC,GACjBC,OAAQA,EACRC,YAAaA,EACbC,cAAeA,EACfC,OAAQA,EACRS,SAAUA,EAEd,EAYA5B,EAAUiF,YAAc,SAAUnD,GAChC,IAAKA,IAAwB,IAAnBA,EAAEK,aAAuB,OAAO,EAC1C,IAAKnC,EAAU0C,MAAO,OAAO,EAE7B,IAAIvE,EAAGD,EACLc,EAAI8C,EAAE9C,EACNG,EAAI2C,EAAE3C,EACNb,EAAIwD,EAAExD,EAERsF,EAAK,GAA2B,kBAAvB,CAAC,EAAErK,SAAS2L,KAAKlG,IAExB,IAAW,IAANV,IAAkB,IAAPA,IAAaa,IAAMnB,GAAOmB,GAAKnB,GAAOmB,IAAM5B,EAAU4B,GAAI,CAGxE,GAAa,IAATH,EAAE,GAAU,CACd,GAAU,IAANG,GAAwB,IAAbH,EAAExF,OAAc,OAAO,EACtC,MAAMoK,CACR,CAQA,IALAzF,GAAKgB,EAAI,GAAKvB,GACN,IAAGO,GAAKP,GAIZ4B,OAAOR,EAAE,IAAIxF,QAAU2E,EAAG,CAE5B,IAAKA,EAAI,EAAGA,EAAIa,EAAExF,OAAQ2E,IAExB,IADAD,EAAIc,EAAEb,IACE,GAAKD,GAAKP,GAAQO,IAAMX,EAAUW,GAAI,MAAM0F,EAItD,GAAU,IAAN1F,EAAS,OAAO,CACtB,CACF,OAGK,GAAU,OAANc,GAAoB,OAANG,IAAqB,OAANb,GAAoB,IAANA,IAAkB,IAAPA,GAC/D,OAAO,EAGT,MAAMrE,MACHwD,EAAiB,sBAAwBqE,EAC9C,EAQA9B,EAAUmF,QAAUnF,EAAUT,IAAM,WAClC,OAAO4D,EAAShI,WAAY,EAC9B,EAQA6E,EAAUoF,QAAUpF,EAAUV,IAAM,WAClC,OAAO6D,EAAShI,UAAW,EAC7B,EAaA6E,EAAUqF,OAAU,WAClB,IAAIC,EAAU,iBAMVC,EAAkBlI,KAAKgI,SAAWC,EAAW,QAC9C,WAAc,OAAO/H,EAAUF,KAAKgI,SAAWC,EAAU,EACzD,WAAc,OAA2C,SAAlB,WAAhBjI,KAAKgI,SAAwB,IACnC,QAAhBhI,KAAKgI,SAAsB,EAAI,EAEnC,OAAO,SAAUG,GACf,IAAInH,EAAGS,EAAGK,EAAGD,EAAG4C,EACd3D,EAAI,EACJa,EAAI,GACJyG,EAAO,IAAIzF,EAAUS,GAOvB,GALU,MAAN+E,EAAYA,EAAK9E,EAChBrB,EAASmG,EAAI,EAAGxH,GAErBkB,EAAI9B,EAASoI,EAAK5H,GAEdoD,EAGF,GAAI4D,OAAOC,gBAAiB,CAI1B,IAFAxG,EAAIuG,OAAOC,gBAAgB,IAAIa,YAAYxG,GAAK,IAEzCf,EAAIe,IAQT4C,EAAW,OAAPzD,EAAEF,IAAgBE,EAAEF,EAAI,KAAO,MAM1B,MACPW,EAAI8F,OAAOC,gBAAgB,IAAIa,YAAY,IAC3CrH,EAAEF,GAAKW,EAAE,GACTT,EAAEF,EAAI,GAAKW,EAAE,KAKbE,EAAE6D,KAAKf,EAAI,MACX3D,GAAK,GAGTA,EAAIe,EAAI,CAGV,KAAO,KAAI0F,OAAOE,YA2BhB,MADA9D,GAAS,EACH/G,MACJwD,EAAiB,sBAvBnB,IAFAY,EAAIuG,OAAOE,YAAY5F,GAAK,GAErBf,EAAIe,IAMT4C,EAAmB,iBAAN,GAAPzD,EAAEF,IAA0C,cAAXE,EAAEF,EAAI,GAC9B,WAAXE,EAAEF,EAAI,GAAgC,SAAXE,EAAEF,EAAI,IACjCE,EAAEF,EAAI,IAAM,KAAOE,EAAEF,EAAI,IAAM,GAAKE,EAAEF,EAAI,KAErC,KACPyG,OAAOE,YAAY,GAAGa,KAAKtH,EAAGF,IAI9Ba,EAAE6D,KAAKf,EAAI,MACX3D,GAAK,GAGTA,EAAIe,EAAI,CAKV,CAIF,IAAK8B,EAEH,KAAO7C,EAAIe,IACT4C,EAAIyD,KACI,OAAMvG,EAAEb,KAAO2D,EAAI,MAc/B,IAVA5C,EAAIF,IAAIb,GACRqH,GAAM5H,EAGFsB,GAAKsG,IACP1D,EAAIhE,EAASF,EAAW4H,GACxBxG,EAAEb,GAAKZ,EAAU2B,EAAI4C,GAAKA,GAIZ,IAAT9C,EAAEb,GAAUa,EAAEsE,MAAOnF,KAG5B,GAAIA,EAAI,EACNa,EAAI,CAACG,EAAI,OACJ,CAGL,IAAKA,GAAK,EAAa,IAATH,EAAE,GAAUA,EAAE4G,OAAO,EAAG,GAAIzG,GAAKvB,GAG/C,IAAKO,EAAI,EAAG2D,EAAI9C,EAAE,GAAI8C,GAAK,GAAIA,GAAK,GAAI3D,KAGpCA,EAAIP,IAAUuB,GAAKvB,EAAWO,EACpC,CAIA,OAFAsH,EAAKtG,EAAIA,EACTsG,EAAKzG,EAAIA,EACFyG,CACT,CACF,CAnIoB,GA2IpBzF,EAAU6F,IAAM,WAId,IAHA,IAAI1H,EAAI,EACNiF,EAAOjI,UACP0K,EAAM,IAAI7F,EAAUoD,EAAK,IACpBjF,EAAIiF,EAAK5J,QAASqM,EAAMA,EAAIC,KAAK1C,EAAKjF,MAC7C,OAAO0H,CACT,EAOAzF,EAAe,WACb,IAAI2F,EAAU,aAOd,SAASC,EAAUrG,EAAKsG,EAAQC,EAASnE,GAOvC,IANA,IAAIvD,EAEF2H,EADAC,EAAM,CAAC,GAEPjI,EAAI,EACJ2B,EAAMH,EAAInG,OAEL2E,EAAI2B,GAAM,CACf,IAAKqG,EAAOC,EAAI5M,OAAQ2M,IAAQC,EAAID,IAASF,GAI7C,IAFAG,EAAI,IAAMrE,EAASM,QAAQ1C,EAAIC,OAAOzB,MAEjCK,EAAI,EAAGA,EAAI4H,EAAI5M,OAAQgF,IAEtB4H,EAAI5H,GAAK0H,EAAU,IACH,MAAdE,EAAI5H,EAAI,KAAY4H,EAAI5H,EAAI,GAAK,GACrC4H,EAAI5H,EAAI,IAAM4H,EAAI5H,GAAK0H,EAAU,EACjCE,EAAI5H,IAAM0H,EAGhB,CAEA,OAAOE,EAAI/M,SACb,CAKA,OAAO,SAAUsG,EAAKsG,EAAQC,EAASG,EAAMC,GAC3C,IAAIvE,EAAUyB,EAAGrE,EAAGD,EAAGT,EAAGG,EAAGG,EAAIF,EAC/BV,EAAIwB,EAAI0C,QAAQ,KAChBmD,EAAK9E,EACLqC,EAAKpC,EA+BP,IA5BIxC,GAAK,IACPe,EAAIgC,EAGJA,EAAgB,EAChBvB,EAAMA,EAAI2C,QAAQ,IAAK,IAEvB1D,GADAC,EAAI,IAAImB,EAAUiG,IACZM,IAAI5G,EAAInG,OAAS2E,GACvB+C,EAAgBhC,EAKhBL,EAAEG,EAAIgH,EAAUnG,EAAazB,EAAcQ,EAAEI,GAAIJ,EAAEO,EAAG,KACrD,GAAI+G,EAASH,GACdlH,EAAEM,EAAIN,EAAEG,EAAExF,QAUZ2F,EAAID,GALJH,EAAKiH,EAAUrG,EAAKsG,EAAQC,EAASI,GACjCvE,EAAWH,EAAUmE,IACrBhE,EAAWgE,EAASnE,KAGbpI,OAGO,GAAXuF,IAAKG,GAASH,EAAGuE,OAGxB,IAAKvE,EAAG,GAAI,OAAOgD,EAASnC,OAAO,GAqCnC,GAlCIzB,EAAI,IACJgB,GAEFP,EAAEI,EAAID,EACNH,EAAEO,EAAIA,EAGNP,EAAEN,EAAI+H,EAENtH,GADAH,EAAIuB,EAAIvB,EAAGC,EAAG2G,EAAIzC,EAAImD,IACflH,EACPP,EAAIG,EAAEH,EACNU,EAAIP,EAAEO,GASRhB,EAAIY,EAHJyE,EAAIrE,EAAIqG,EAAK,GAObtG,EAAIgH,EAAU,EACdzH,EAAIA,GAAK+E,EAAI,GAAkB,MAAbzE,EAAGyE,EAAI,GAEzB/E,EAAIsE,EAAK,GAAU,MAAL5E,GAAaM,KAAa,GAANsE,GAAWA,IAAOnE,EAAEN,EAAI,EAAI,EAAI,IAC1DH,EAAIe,GAAKf,GAAKe,IAAW,GAAN6D,GAAWtE,GAAW,GAANsE,GAAuB,EAAZhE,EAAGyE,EAAI,IACtDT,IAAOnE,EAAEN,EAAI,EAAI,EAAI,IAKxBkF,EAAI,IAAMzE,EAAG,GAGfY,EAAMlB,EAAIoB,EAAakC,EAASnC,OAAO,IAAK4F,EAAIzD,EAASnC,OAAO,IAAMmC,EAASnC,OAAO,OACjF,CAML,GAHAb,EAAGvF,OAASgK,EAGR/E,EAGF,MAAOyH,IAAWnH,IAAKyE,GAAK0C,GAC1BnH,EAAGyE,GAAK,EAEHA,MACDrE,EACFJ,EAAK,CAAC,GAAGrF,OAAOqF,IAMtB,IAAKG,EAAIH,EAAGvF,QAASuF,IAAKG,KAG1B,IAAKf,EAAI,EAAGwB,EAAM,GAAIxB,GAAKe,EAAGS,GAAOoC,EAASnC,OAAOb,EAAGZ,OAGxDwB,EAAME,EAAaF,EAAKR,EAAG4C,EAASnC,OAAO,GAC7C,CAGA,OAAOD,CACT,CACF,CAnJe,GAuJfQ,EAAO,WAGL,SAASqG,EAAS5H,EAAGM,EAAGuH,GACtB,IAAIC,EAAGC,EAAMC,EAAKC,EAChBC,EAAQ,EACR3I,EAAIS,EAAEpF,OACNuN,EAAM7H,EAAInB,EACViJ,EAAM9H,EAAInB,EAAY,EAExB,IAAKa,EAAIA,EAAE7E,QAASoE,KAKlB2I,IADAH,EAAOI,GAHPH,EAAMhI,EAAET,GAAKJ,IAEb2I,EAAIM,EAAMJ,GADVC,EAAMjI,EAAET,GAAKJ,EAAY,GACHgJ,GACGhJ,EAAaA,EAAa+I,GACnCL,EAAO,IAAMC,EAAI3I,EAAY,GAAKiJ,EAAMH,EACxDjI,EAAET,GAAKwI,EAAOF,EAKhB,OAFIK,IAAOlI,EAAI,CAACkI,GAAOpN,OAAOkF,IAEvBA,CACT,CAEA,SAASD,EAAQN,EAAGS,EAAGmI,EAAIC,GACzB,IAAI/I,EAAGgJ,EAEP,GAAIF,GAAMC,EACRC,EAAMF,EAAKC,EAAK,GAAK,OAGrB,IAAK/I,EAAIgJ,EAAM,EAAGhJ,EAAI8I,EAAI9I,IAExB,GAAIE,EAAEF,IAAMW,EAAEX,GAAI,CAChBgJ,EAAM9I,EAAEF,GAAKW,EAAEX,GAAK,GAAK,EACzB,KACF,CAIJ,OAAOgJ,CACT,CAEA,SAASC,EAAS/I,EAAGS,EAAGmI,EAAIR,GAI1B,IAHA,IAAItI,EAAI,EAGD8I,KACL5I,EAAE4I,IAAO9I,EACTA,EAAIE,EAAE4I,GAAMnI,EAAEmI,GAAM,EAAI,EACxB5I,EAAE4I,GAAM9I,EAAIsI,EAAOpI,EAAE4I,GAAMnI,EAAEmI,GAI/B,MAAQ5I,EAAE,IAAMA,EAAE7E,OAAS,EAAG6E,EAAEuH,OAAO,EAAG,IAC5C,CAGA,OAAO,SAAUhH,EAAGC,EAAG2G,EAAIzC,EAAI0D,GAC7B,IAAIU,EAAKhI,EAAGhB,EAAGkJ,EAAMnJ,EAAGoJ,EAAMC,EAAOC,EAAGC,EAAIC,EAAKC,EAAMC,EAAMC,EAAIC,EAAIC,EACnEC,EAAIC,EACJ3J,EAAIM,EAAEN,GAAKO,EAAEP,EAAI,GAAK,EACtBS,EAAKH,EAAEI,EACPC,EAAKJ,EAAEG,EAGT,IAAKD,IAAOA,EAAG,KAAOE,IAAOA,EAAG,GAE9B,OAAO,IAAIe,EAGTpB,EAAEN,GAAMO,EAAEP,IAAMS,GAAKE,GAAMF,EAAG,IAAME,EAAG,GAAMA,GAG7CF,GAAe,GAATA,EAAG,KAAYE,EAAS,EAAJX,EAAQA,EAAI,EAHa4J,KAoBvD,IAZAT,GADAD,EAAI,IAAIxH,EAAU1B,IACXU,EAAI,GAEXV,EAAIkH,GADJrG,EAAIP,EAAEO,EAAIN,EAAEM,GACC,EAERsH,IACHA,EAAO9I,EACPwB,EAAIlB,EAASW,EAAEO,EAAIvB,GAAYK,EAASY,EAAEM,EAAIvB,GAC9CU,EAAIA,EAAIV,EAAW,GAKhBO,EAAI,EAAGc,EAAGd,KAAOY,EAAGZ,IAAM,GAAIA,KAInC,GAFIc,EAAGd,IAAMY,EAAGZ,IAAM,IAAIgB,IAEtBb,EAAI,EACNmJ,EAAG5E,KAAK,GACRwE,GAAO,MACF,CAwBL,IAvBAS,EAAK/I,EAAGvF,OACRwO,EAAK/I,EAAGzF,OACR2E,EAAI,EACJG,GAAK,GAILJ,EAAIX,EAAUkJ,GAAQxH,EAAG,GAAK,KAItB,IACNA,EAAKuH,EAASvH,EAAIf,EAAGuI,GACrB1H,EAAKyH,EAASzH,EAAIb,EAAGuI,GACrBuB,EAAK/I,EAAGzF,OACRsO,EAAK/I,EAAGvF,QAGVqO,EAAKG,EAELL,GADAD,EAAM3I,EAAGhF,MAAM,EAAGiO,IACPxO,OAGJmO,EAAOK,EAAIN,EAAIC,KAAU,GAChCM,EAAKhJ,EAAGlF,QACRkO,EAAK,CAAC,GAAGvO,OAAOuO,GAChBF,EAAM9I,EAAG,GACLA,EAAG,IAAMwH,EAAO,GAAGsB,IAIvB,EAAG,CAOD,GANA7J,EAAI,GAGJiJ,EAAMxI,EAAQM,EAAIyI,EAAKM,EAAIL,IAGjB,EAAG,CAqBX,GAjBAC,EAAOF,EAAI,GACPM,GAAML,IAAMC,EAAOA,EAAOnB,GAAQiB,EAAI,IAAM,KAGhDxJ,EAAIX,EAAUqK,EAAOG,IAab,EAcN,IAXI7J,GAAKuI,IAAMvI,EAAIuI,EAAO,GAI1Bc,GADAD,EAAOd,EAASvH,EAAIf,EAAGuI,IACVjN,OACbmO,EAAOD,EAAIlO,OAM+B,GAAnCmF,EAAQ2I,EAAMI,EAAKH,EAAOI,IAC/BzJ,IAGAkJ,EAASE,EAAMU,EAAKT,EAAQU,EAAKhJ,EAAIsI,EAAOd,GAC5Cc,EAAQD,EAAK9N,OACb2N,EAAM,OAQC,GAALjJ,IAGFiJ,EAAMjJ,EAAI,GAKZqJ,GADAD,EAAOrI,EAAGlF,SACGP,OAUf,GAPI+N,EAAQI,IAAML,EAAO,CAAC,GAAG5N,OAAO4N,IAGpCF,EAASM,EAAKJ,EAAMK,EAAMlB,GAC1BkB,EAAOD,EAAIlO,QAGC,GAAR2N,EAMF,KAAOxI,EAAQM,EAAIyI,EAAKM,EAAIL,GAAQ,GAClCzJ,IAGAkJ,EAASM,EAAKM,EAAKL,EAAOM,EAAKhJ,EAAI0I,EAAMlB,GACzCkB,EAAOD,EAAIlO,MAGjB,MAAmB,IAAR2N,IACTjJ,IACAwJ,EAAM,CAAC,IAITD,EAAGtJ,KAAOD,EAGNwJ,EAAI,GACNA,EAAIC,KAAU5I,EAAG8I,IAAO,GAExBH,EAAM,CAAC3I,EAAG8I,IACVF,EAAO,EAEX,QAAUE,IAAOC,GAAgB,MAAVJ,EAAI,KAAepJ,KAE1C+I,EAAiB,MAAVK,EAAI,GAGND,EAAG,IAAIA,EAAG7B,OAAO,EAAG,EAC3B,CAEA,GAAIa,GAAQ9I,EAAM,CAGhB,IAAKQ,EAAI,EAAGG,EAAImJ,EAAG,GAAInJ,GAAK,GAAIA,GAAK,GAAIH,KAEzCsE,EAAM+E,EAAGhC,GAAMgC,EAAErI,EAAIhB,EAAIgB,EAAIvB,EAAW,GAAK,EAAGmF,EAAIsE,EAGtD,MACEG,EAAErI,EAAIA,EACNqI,EAAE/I,GAAK4I,EAGT,OAAOG,CACT,CACF,CAhQO,GA2XPnH,EAAgB,WACd,IAAI8H,EAAa,8BACfC,EAAW,cACXC,EAAY,cACZC,EAAkB,qBAClBC,EAAmB,6BAErB,OAAO,SAAU3J,EAAGe,EAAKsC,EAAOnD,GAC9B,IAAI2H,EACFnI,EAAI2D,EAAQtC,EAAMA,EAAI2C,QAAQiG,EAAkB,IAGlD,GAAID,EAAgBlG,KAAK9D,GACvBM,EAAEN,EAAIkK,MAAMlK,GAAK,KAAOA,EAAI,GAAK,EAAI,MAChC,CACL,IAAK2D,IAGH3D,EAAIA,EAAEgE,QAAQ6F,EAAY,SAAUzB,EAAG+B,EAAIC,GAEzC,OADAjC,EAAkC,MAA1BiC,EAAKA,EAAG9F,eAAwB,GAAW,KAAN8F,EAAY,EAAI,EACrD5J,GAAKA,GAAK2H,EAAYC,EAAL+B,CAC3B,GAEI3J,IACF2H,EAAO3H,EAGPR,EAAIA,EAAEgE,QAAQ8F,EAAU,MAAM9F,QAAQ+F,EAAW,SAG/C1I,GAAOrB,GAAG,OAAO,IAAI0B,EAAU1B,EAAGmI,GAKxC,GAAIzG,EAAU0C,MACZ,MAAMzI,MACHwD,EAAiB,SAAWqB,EAAI,SAAWA,EAAI,IAAM,YAAca,GAIxEf,EAAEN,EAAI,IACR,CAEAM,EAAEI,EAAIJ,EAAEO,EAAI,IACd,CACF,CA9CgB,GAyOhBmB,EAAEqI,cAAgBrI,EAAEsI,IAAM,WACxB,IAAIhK,EAAI,IAAIoB,EAAUkC,MAEtB,OADItD,EAAEN,EAAI,IAAGM,EAAEN,EAAI,GACZM,CACT,EAUA0B,EAAEuI,WAAa,SAAUhK,EAAGC,GAC1B,OAAOH,EAAQuD,KAAM,IAAIlC,EAAUnB,EAAGC,GACxC,EAgBAwB,EAAEwI,cAAgBxI,EAAEkF,GAAK,SAAUA,EAAIzC,GACrC,IAAI/D,EAAGd,EAAG4D,EACRlD,EAAIsD,KAEN,GAAU,MAANsD,EAKF,OAJAnG,EAASmG,EAAI,EAAGxH,GACN,MAAN+E,EAAYA,EAAKpC,EAChBtB,EAAS0D,EAAI,EAAG,GAEdN,EAAM,IAAIzC,EAAUpB,GAAI4G,EAAK5G,EAAEO,EAAI,EAAG4D,GAG/C,KAAM/D,EAAIJ,EAAEI,GAAI,OAAO,KAIvB,GAHAd,IAAM4D,EAAI9C,EAAExF,OAAS,GAAKyE,EAASiE,KAAK/C,EAAIvB,IAAaA,EAGrDkE,EAAI9C,EAAE8C,GAAI,KAAOA,EAAI,IAAM,EAAGA,GAAK,GAAI5D,KAG3C,OAFIA,EAAI,IAAGA,EAAI,GAERA,CACT,EAuBAoC,EAAEyI,UAAYzI,EAAEH,IAAM,SAAUtB,EAAGC,GACjC,OAAOqB,EAAI+B,KAAM,IAAIlC,EAAUnB,EAAGC,GAAI4B,EAAgBC,EACxD,EAOAL,EAAE0I,mBAAqB1I,EAAE2I,KAAO,SAAUpK,EAAGC,GAC3C,OAAOqB,EAAI+B,KAAM,IAAIlC,EAAUnB,EAAGC,GAAI,EAAG,EAC3C,EAkBAwB,EAAE4I,gBAAkB5I,EAAEiG,IAAM,SAAUrI,EAAGwI,GACvC,IAAIyC,EAAMC,EAAUjL,EAAGe,EAASmK,EAAQC,EAAQC,EAAQ1K,EACtDD,EAAIsD,KAKN,IAHAhE,EAAI,IAAI8B,EAAU9B,IAGZc,IAAMd,EAAEsL,YACZ,MAAMvP,MACHwD,EAAiB,4BAA8B+C,EAAQtC,IAS5D,GANS,MAALwI,IAAWA,EAAI,IAAI1G,EAAU0G,IAGjC2C,EAASnL,EAAEiB,EAAI,IAGVP,EAAEI,IAAMJ,EAAEI,EAAE,IAAgB,GAAVJ,EAAEI,EAAE,KAAYJ,EAAEO,GAAmB,GAAdP,EAAEI,EAAExF,SAAgB0E,EAAEc,IAAMd,EAAEc,EAAE,GAK5E,OADAH,EAAI,IAAImB,EAAU3C,KAAKkJ,KAAK/F,EAAQ5B,GAAIyK,EAASnL,EAAEI,GAAK,EAAImB,EAAMvB,KAAOsC,EAAQtC,KAC1EwI,EAAI7H,EAAE4K,IAAI/C,GAAK7H,EAKxB,GAFAyK,EAASpL,EAAEI,EAAI,EAEXoI,EAAG,CAGL,GAAIA,EAAE1H,GAAK0H,EAAE1H,EAAE,IAAM0H,EAAEpI,EAAG,OAAO,IAAI0B,EAAUkI,MAE/CkB,GAAYE,GAAU1K,EAAE4K,aAAe9C,EAAE8C,eAE3B5K,EAAIA,EAAE6K,IAAI/C,GAI1B,KAAO,IAAIxI,EAAEiB,EAAI,IAAMP,EAAEO,EAAI,GAAKP,EAAEO,GAAK,IAAa,GAAPP,EAAEO,EAE7CP,EAAEI,EAAE,GAAK,GAAKqK,GAAUzK,EAAEI,EAAE,IAAM,KAElCJ,EAAEI,EAAE,GAAK,MAAQqK,GAAUzK,EAAEI,EAAE,IAAM,YASvC,OANAE,EAAIN,EAAEN,EAAI,GAAKmB,EAAMvB,IAAM,EAAI,EAG3BU,EAAEO,GAAK,IAAGD,EAAI,EAAIA,GAGf,IAAIc,EAAUsJ,EAAS,EAAIpK,EAAIA,GAE7BgC,IAKThC,EAAI9B,EAAS8D,EAAgBtD,EAAW,GAC1C,CAcA,IAZIyL,GACFF,EAAO,IAAInJ,EAAU,IACjBsJ,IAAQpL,EAAEI,EAAI,GAClBiL,EAAS9J,EAAMvB,IAGfqL,GADApL,EAAId,KAAKuL,KAAKpI,EAAQtC,KACT,EAGfW,EAAI,IAAImB,EAAUS,KAGR,CAER,GAAI8I,EAAQ,CAEV,KADA1K,EAAIA,EAAE6K,MAAM9K,IACLI,EAAG,MAENE,EACEL,EAAEG,EAAExF,OAAS0F,IAAGL,EAAEG,EAAExF,OAAS0F,GACxBkK,IACTvK,EAAIA,EAAE4K,IAAI/C,GAEd,CAEA,GAAIvI,EAAG,CAEL,GAAU,KADVA,EAAIZ,EAAUY,EAAI,IACL,MACboL,EAASpL,EAAI,CACf,MAIE,GAFAsE,EADAvE,EAAIA,EAAEwL,MAAMP,GACHjL,EAAEiB,EAAI,EAAG,GAEdjB,EAAEiB,EAAI,GACRoK,EAAS9J,EAAMvB,OACV,CAEL,GAAU,KADVC,GAAKqC,EAAQtC,IACA,MACbqL,EAASpL,EAAI,CACf,CAGFS,EAAIA,EAAE8K,MAAM9K,GAERM,EACEN,EAAEI,GAAKJ,EAAEI,EAAExF,OAAS0F,IAAGN,EAAEI,EAAExF,OAAS0F,GAC/BkK,IACTxK,EAAIA,EAAE6K,IAAI/C,GAEd,CAEA,OAAI0C,EAAiBvK,GACjByK,IAAQzK,EAAI4B,EAAIN,IAAItB,IAEjB6H,EAAI7H,EAAE4K,IAAI/C,GAAKxH,EAAIuD,EAAM5D,EAAGqC,EAAeP,EAnHxB0G,WAmH+CxI,EAC3E,EAWAyB,EAAEqJ,aAAe,SAAU5G,GACzB,IAAI7E,EAAI,IAAI8B,EAAUkC,MAGtB,OAFU,MAANa,EAAYA,EAAKpC,EAChBtB,EAAS0D,EAAI,EAAG,GACdN,EAAMvE,EAAGA,EAAEiB,EAAI,EAAG4D,EAC3B,EAOAzC,EAAEsJ,UAAYtJ,EAAEuJ,GAAK,SAAUhL,EAAGC,GAChC,OAA8C,IAAvCH,EAAQuD,KAAM,IAAIlC,EAAUnB,EAAGC,GACxC,EAMAwB,EAAEwJ,SAAW,WACX,QAAS5H,KAAKlD,CAChB,EAOAsB,EAAEyJ,cAAgBzJ,EAAE0J,GAAK,SAAUnL,EAAGC,GACpC,OAAOH,EAAQuD,KAAM,IAAIlC,EAAUnB,EAAGC,IAAM,CAC9C,EAOAwB,EAAE2J,uBAAyB3J,EAAE4J,IAAM,SAAUrL,EAAGC,GAC9C,OAAoD,KAA5CA,EAAIH,EAAQuD,KAAM,IAAIlC,EAAUnB,EAAGC,MAAoB,IAANA,CAE3D,EAMAwB,EAAEkJ,UAAY,WACZ,QAAStH,KAAKlD,GAAKf,EAASiE,KAAK/C,EAAIvB,GAAYsE,KAAKlD,EAAExF,OAAS,CACnE,EAOA8G,EAAE6J,WAAa7J,EAAE8J,GAAK,SAAUvL,EAAGC,GACjC,OAAOH,EAAQuD,KAAM,IAAIlC,EAAUnB,EAAGC,IAAM,CAC9C,EAOAwB,EAAE+J,oBAAsB/J,EAAEgK,IAAM,SAAUzL,EAAGC,GAC3C,OAAqD,KAA7CA,EAAIH,EAAQuD,KAAM,IAAIlC,EAAUnB,EAAGC,MAAqB,IAANA,CAC5D,EAMAwB,EAAEkI,MAAQ,WACR,OAAQtG,KAAK5D,CACf,EAMAgC,EAAEiK,WAAa,WACb,OAAOrI,KAAK5D,EAAI,CAClB,EAMAgC,EAAEkK,WAAa,WACb,OAAOtI,KAAK5D,EAAI,CAClB,EAMAgC,EAAEmK,OAAS,WACT,QAASvI,KAAKlD,GAAkB,GAAbkD,KAAKlD,EAAE,EAC5B,EAuBAsB,EAAEoK,MAAQ,SAAU7L,EAAGC,GACrB,IAAIX,EAAGK,EAAGmM,EAAGC,EACXhM,EAAIsD,KACJ7D,EAAIO,EAAEN,EAMR,GAHAQ,GADAD,EAAI,IAAImB,EAAUnB,EAAGC,IACfR,GAGDD,IAAMS,EAAG,OAAO,IAAIkB,EAAUkI,KAGnC,GAAI7J,GAAKS,EAEP,OADAD,EAAEP,GAAKQ,EACAF,EAAEkH,KAAKjH,GAGhB,IAAIgM,EAAKjM,EAAEO,EAAIvB,EACbkN,EAAKjM,EAAEM,EAAIvB,EACXmB,EAAKH,EAAEI,EACPC,EAAKJ,EAAEG,EAET,IAAK6L,IAAOC,EAAI,CAGd,IAAK/L,IAAOE,EAAI,OAAOF,GAAMF,EAAEP,GAAKQ,EAAGD,GAAK,IAAImB,EAAUf,EAAKL,EAAIsJ,KAGnE,IAAKnJ,EAAG,KAAOE,EAAG,GAGhB,OAAOA,EAAG,IAAMJ,EAAEP,GAAKQ,EAAGD,GAAK,IAAImB,EAAUjB,EAAG,GAAKH,EAGnC,GAAjB+B,GAAsB,EAAI,EAE/B,CAOA,GALAkK,EAAK5M,EAAS4M,GACdC,EAAK7M,EAAS6M,GACd/L,EAAKA,EAAGhF,QAGJsE,EAAIwM,EAAKC,EAAI,CAaf,KAXIF,EAAOvM,EAAI,IACbA,GAAKA,EACLsM,EAAI5L,IAEJ+L,EAAKD,EACLF,EAAI1L,GAGN0L,EAAEtR,UAGGyF,EAAIT,EAAGS,IAAK6L,EAAE9H,KAAK,IACxB8H,EAAEtR,SACJ,MAKE,IAFAmF,GAAKoM,GAAQvM,EAAIU,EAAGvF,SAAWsF,EAAIG,EAAGzF,SAAW6E,EAAIS,EAEhDT,EAAIS,EAAI,EAAGA,EAAIN,EAAGM,IAErB,GAAIC,EAAGD,IAAMG,EAAGH,GAAI,CAClB8L,EAAO7L,EAAGD,GAAKG,EAAGH,GAClB,KACF,CAgBJ,GAXI8L,IACFD,EAAI5L,EACJA,EAAKE,EACLA,EAAK0L,EACL9L,EAAEP,GAAKO,EAAEP,IAGXQ,GAAKN,EAAIS,EAAGzF,SAAW2E,EAAIY,EAAGvF,SAItB,EAAG,KAAOsF,IAAKC,EAAGZ,KAAO,GAIjC,IAHAW,EAAInB,EAAO,EAGJa,EAAIH,GAAI,CAEb,GAAIU,IAAKP,GAAKS,EAAGT,GAAI,CACnB,IAAKL,EAAIK,EAAGL,IAAMY,IAAKZ,GAAIY,EAAGZ,GAAKW,KACjCC,EAAGZ,GACLY,EAAGP,IAAMb,CACX,CAEAoB,EAAGP,IAAMS,EAAGT,EACd,CAGA,KAAgB,GAATO,EAAG,GAASA,EAAG6G,OAAO,EAAG,KAAMkF,GAGtC,OAAK/L,EAAG,GAWDsE,EAAUxE,EAAGE,EAAI+L,IAPtBjM,EAAEP,EAAqB,GAAjBqC,GAAsB,EAAI,EAChC9B,EAAEG,EAAI,CAACH,EAAEM,EAAI,GACNN,EAMX,EAwBAyB,EAAEyK,OAASzK,EAAEmJ,IAAM,SAAU5K,EAAGC,GAC9B,IAAI0I,EAAGlJ,EACLM,EAAIsD,KAKN,OAHArD,EAAI,IAAImB,EAAUnB,EAAGC,IAGhBF,EAAEI,IAAMH,EAAEP,GAAKO,EAAEG,IAAMH,EAAEG,EAAE,GACvB,IAAIgB,EAAUkI,MAGXrJ,EAAEG,GAAKJ,EAAEI,IAAMJ,EAAEI,EAAE,GACtB,IAAIgB,EAAUpB,IAGJ,GAAfqC,GAIF3C,EAAIO,EAAEP,EACNO,EAAEP,EAAI,EACNkJ,EAAIrH,EAAIvB,EAAGC,EAAG,EAAG,GACjBA,EAAEP,EAAIA,EACNkJ,EAAElJ,GAAKA,GAEPkJ,EAAIrH,EAAIvB,EAAGC,EAAG,EAAGoC,IAGnBpC,EAAID,EAAE8L,MAAMlD,EAAEkC,MAAM7K,KAGbG,EAAE,IAAqB,GAAfiC,IAAkBpC,EAAEP,EAAIM,EAAEN,GAElCO,EACT,EAuBAyB,EAAE0K,aAAe1K,EAAEoJ,MAAQ,SAAU7K,EAAGC,GACtC,IAAIE,EAAGG,EAAGhB,EAAGK,EAAGU,EAAGwH,EAAGuE,EAAKrE,EAAKC,EAAKqE,EAAKC,EAAKC,EAAKC,EAClD5E,EAAM6E,EACN1M,EAAIsD,KACJnD,EAAKH,EAAEI,EACPC,GAAMJ,EAAI,IAAImB,EAAUnB,EAAGC,IAAIE,EAGjC,IAAKD,IAAOE,IAAOF,EAAG,KAAOE,EAAG,GAmB9B,OAhBKL,EAAEN,IAAMO,EAAEP,GAAKS,IAAOA,EAAG,KAAOE,GAAMA,IAAOA,EAAG,KAAOF,EAC1DF,EAAEG,EAAIH,EAAEM,EAAIN,EAAEP,EAAI,MAElBO,EAAEP,GAAKM,EAAEN,EAGJS,GAAOE,GAKVJ,EAAEG,EAAI,CAAC,GACPH,EAAEM,EAAI,GALNN,EAAEG,EAAIH,EAAEM,EAAI,MASTN,EAmBT,IAhBAM,EAAIlB,EAASW,EAAEO,EAAIvB,GAAYK,EAASY,EAAEM,EAAIvB,GAC9CiB,EAAEP,GAAKM,EAAEN,GACT2M,EAAMlM,EAAGvF,SACT0R,EAAMjM,EAAGzF,UAIP6R,EAAKtM,EACLA,EAAKE,EACLA,EAAKoM,EACLlN,EAAI8M,EACJA,EAAMC,EACNA,EAAM/M,GAIHA,EAAI8M,EAAMC,EAAKG,EAAK,GAAIlN,IAAKkN,EAAGxI,KAAK,IAK1C,IAHA4D,EAAO9I,EACP2N,EAAWvN,EAENI,EAAI+M,IAAO/M,GAAK,GAAI,CAKvB,IAJAa,EAAI,EACJmM,EAAMlM,EAAGd,GAAKmN,EACdF,EAAMnM,EAAGd,GAAKmN,EAAW,EAEX9M,EAAIL,GAAbe,EAAI+L,GAAgBzM,EAAIL,GAK3Ba,IADA4H,EAAMuE,GAHNvE,EAAM7H,IAAKG,GAAKoM,IAEhB5E,EAAI0E,EAAMxE,GADVC,EAAM9H,EAAGG,GAAKoM,EAAW,GACHH,GACEG,EAAYA,EAAYD,EAAG7M,GAAKQ,GAC7CyH,EAAO,IAAMC,EAAI4E,EAAW,GAAKF,EAAMvE,EAClDwE,EAAG7M,KAAOoI,EAAMH,EAGlB4E,EAAG7M,GAAKQ,CACV,CAQA,OANIA,IACAG,EAEFkM,EAAGzF,OAAO,EAAG,GAGRvC,EAAUxE,EAAGwM,EAAIlM,EAC1B,EAOAmB,EAAEiL,QAAU,WACV,IAAI3M,EAAI,IAAIoB,EAAUkC,MAEtB,OADAtD,EAAEN,GAAKM,EAAEN,GAAK,KACPM,CACT,EAuBA0B,EAAEwF,KAAO,SAAUjH,EAAGC,GACpB,IAAI6L,EACF/L,EAAIsD,KACJ7D,EAAIO,EAAEN,EAMR,GAHAQ,GADAD,EAAI,IAAImB,EAAUnB,EAAGC,IACfR,GAGDD,IAAMS,EAAG,OAAO,IAAIkB,EAAUkI,KAGlC,GAAI7J,GAAKS,EAER,OADAD,EAAEP,GAAKQ,EACAF,EAAE8L,MAAM7L,GAGjB,IAAIgM,EAAKjM,EAAEO,EAAIvB,EACbkN,EAAKjM,EAAEM,EAAIvB,EACXmB,EAAKH,EAAEI,EACPC,EAAKJ,EAAEG,EAET,IAAK6L,IAAOC,EAAI,CAGd,IAAK/L,IAAOE,EAAI,OAAO,IAAIe,EAAU3B,EAAI,GAIzC,IAAKU,EAAG,KAAOE,EAAG,GAAI,OAAOA,EAAG,GAAKJ,EAAI,IAAImB,EAAUjB,EAAG,GAAKH,EAAQ,EAAJP,EACrE,CAOA,GALAwM,EAAK5M,EAAS4M,GACdC,EAAK7M,EAAS6M,GACd/L,EAAKA,EAAGhF,QAGJsE,EAAIwM,EAAKC,EAAI,CAUf,IATIzM,EAAI,GACNyM,EAAKD,EACLF,EAAI1L,IAEJZ,GAAKA,EACLsM,EAAI5L,GAGN4L,EAAEtR,UACKgF,IAAKsM,EAAE9H,KAAK,IACnB8H,EAAEtR,SACJ,CAcA,KAZAgF,EAAIU,EAAGvF,SACPsF,EAAIG,EAAGzF,QAGK,IACVmR,EAAI1L,EACJA,EAAKF,EACLA,EAAK4L,EACL7L,EAAIT,GAIDA,EAAI,EAAGS,GACVT,GAAKU,IAAKD,GAAKC,EAAGD,GAAKG,EAAGH,GAAKT,GAAKV,EAAO,EAC3CoB,EAAGD,GAAKnB,IAASoB,EAAGD,GAAK,EAAIC,EAAGD,GAAKnB,EAUvC,OAPIU,IACFU,EAAK,CAACV,GAAG3E,OAAOqF,KACd+L,GAKGzH,EAAUxE,EAAGE,EAAI+L,EAC1B,EAkBAxK,EAAEkL,UAAYlL,EAAEiD,GAAK,SAAUA,EAAIR,GACjC,IAAI/D,EAAGd,EAAG4D,EACRlD,EAAIsD,KAEN,GAAU,MAANqB,GAAcA,MAASA,EAKzB,OAJAlE,EAASkE,EAAI,EAAGvF,GACN,MAAN+E,EAAYA,EAAKpC,EAChBtB,EAAS0D,EAAI,EAAG,GAEdN,EAAM,IAAIzC,EAAUpB,GAAI2E,EAAIR,GAGrC,KAAM/D,EAAIJ,EAAEI,GAAI,OAAO,KAIvB,GAFAd,GADA4D,EAAI9C,EAAExF,OAAS,GACPoE,EAAW,EAEfkE,EAAI9C,EAAE8C,GAAI,CAGZ,KAAOA,EAAI,IAAM,EAAGA,GAAK,GAAI5D,KAG7B,IAAK4D,EAAI9C,EAAE,GAAI8C,GAAK,GAAIA,GAAK,GAAI5D,KACnC,CAIA,OAFIqF,GAAM3E,EAAEO,EAAI,EAAIjB,IAAGA,EAAIU,EAAEO,EAAI,GAE1BjB,CACT,EAWAoC,EAAEmL,UAAY,SAAUvM,GAEtB,OADAG,EAASH,GAAG,iBAAmBrB,GACxBqE,KAAKwH,MAAM,KAAOxK,EAC3B,EAcAoB,EAAEoL,WAAapL,EAAEqL,KAAO,WACtB,IAAIjF,EAAGxI,EAAGO,EAAGmN,EAAKjB,EAChB/L,EAAIsD,KACJlD,EAAIJ,EAAEI,EACNV,EAAIM,EAAEN,EACNa,EAAIP,EAAEO,EACNqG,EAAK9E,EAAiB,EACtByI,EAAO,IAAInJ,EAAU,OAGvB,GAAU,IAAN1B,IAAYU,IAAMA,EAAE,GACtB,OAAO,IAAIgB,GAAW1B,GAAKA,EAAI,KAAOU,GAAKA,EAAE,IAAMkJ,IAAMlJ,EAAIJ,EAAI,KA8BnE,GAtBS,IAJTN,EAAIjB,KAAKsO,MAAMnL,EAAQ5B,MAITN,GAAK,OACjBJ,EAAIE,EAAcY,IACXxF,OAAS2F,GAAK,GAAK,IAAGjB,GAAK,KAClCI,EAAIjB,KAAKsO,MAAMzN,GACfiB,EAAIlB,GAAUkB,EAAI,GAAK,IAAMA,EAAI,GAAKA,EAAI,GAS1CV,EAAI,IAAIuB,EANN9B,EADEI,GAAK,IACH,KAAOa,GAEXjB,EAAII,EAAEoB,iBACA3F,MAAM,EAAGmE,EAAEmE,QAAQ,KAAO,GAAKlD,IAKvCV,EAAI,IAAIuB,EAAU1B,EAAI,IAOpBG,EAAEO,EAAE,GAMN,KAJAV,GADAa,EAAIV,EAAEU,GACEqG,GACA,IAAGlH,EAAI,KAOb,GAHAqM,EAAIlM,EACJA,EAAI0K,EAAKO,MAAMiB,EAAE7E,KAAK3F,EAAIvB,EAAG+L,EAAGnF,EAAI,KAEhCpH,EAAcuM,EAAE3L,GAAGjF,MAAM,EAAGuE,MAAQJ,EAAIE,EAAcK,EAAEO,IAAIjF,MAAM,EAAGuE,GAAI,CAW3E,GANIG,EAAEU,EAAIA,KAAKb,EAMN,SALTJ,EAAIA,EAAEnE,MAAMuE,EAAI,EAAGA,EAAI,MAKHsN,GAAY,QAAL1N,GAgBpB,EAICA,KAAOA,EAAEnE,MAAM,IAAqB,KAAfmE,EAAE0B,OAAO,MAGlC6C,EAAMhE,EAAGA,EAAEU,EAAIuB,EAAiB,EAAG,GACnCgG,GAAKjI,EAAEiL,MAAMjL,GAAGoL,GAAGjL,IAGrB,KACF,CAxBE,IAAKgN,IACHnJ,EAAMkI,EAAGA,EAAExL,EAAIuB,EAAiB,EAAG,GAE/BiK,EAAEjB,MAAMiB,GAAGd,GAAGjL,IAAI,CACpBH,EAAIkM,EACJ,KACF,CAGFnF,GAAM,EACNlH,GAAK,EACLsN,EAAM,CAcV,CAIJ,OAAOnJ,EAAMhE,EAAGA,EAAEU,EAAIuB,EAAiB,EAAGC,EAAe+F,EAC3D,EAYApG,EAAEZ,cAAgB,SAAU8F,EAAIzC,GAK9B,OAJU,MAANyC,IACFnG,EAASmG,EAAI,EAAGxH,GAChBwH,KAEK1C,EAAOZ,KAAMsD,EAAIzC,EAAI,EAC9B,EAeAzC,EAAEuL,QAAU,SAAUrG,EAAIzC,GAKxB,OAJU,MAANyC,IACFnG,EAASmG,EAAI,EAAGxH,GAChBwH,EAAKA,EAAKtD,KAAK/C,EAAI,GAEd2D,EAAOZ,KAAMsD,EAAIzC,EAC1B,EA4BAzC,EAAEwL,SAAW,SAAUtG,EAAIzC,EAAID,GAC7B,IAAInD,EACFf,EAAIsD,KAEN,GAAc,MAAVY,EACQ,MAAN0C,GAAczC,GAAmB,iBAANA,GAC7BD,EAASC,EACTA,EAAK,MACIyC,GAAmB,iBAANA,GACtB1C,EAAS0C,EACTA,EAAKzC,EAAK,MAEVD,EAAS3B,OAEN,GAAqB,iBAAV2B,EAChB,MAAM7I,MACHwD,EAAiB,2BAA6BqF,GAKnD,GAFAnD,EAAMf,EAAEiN,QAAQrG,EAAIzC,GAEhBnE,EAAEI,EAAG,CACP,IAAIb,EACFiI,EAAMzG,EAAIoM,MAAM,KAChBC,GAAMlJ,EAAOzB,UACb4K,GAAMnJ,EAAOxB,mBACbC,EAAiBuB,EAAOvB,gBAAkB,GAC1C2K,EAAU9F,EAAI,GACd+F,EAAe/F,EAAI,GACnBgG,EAAQxN,EAAEN,EAAI,EACd+N,EAAYD,EAAQF,EAAQnS,MAAM,GAAKmS,EACvCpM,EAAMuM,EAAU7S,OASlB,GAPIyS,IACF9N,EAAI6N,EACJA,EAAKC,EACLA,EAAK9N,EACL2B,GAAO3B,GAGL6N,EAAK,GAAKlM,EAAM,EAAG,CAGrB,IAFA3B,EAAI2B,EAAMkM,GAAMA,EAChBE,EAAUG,EAAUC,OAAO,EAAGnO,GACvBA,EAAI2B,EAAK3B,GAAK6N,EAAIE,GAAW3K,EAAiB8K,EAAUC,OAAOnO,EAAG6N,GACrEC,EAAK,IAAGC,GAAW3K,EAAiB8K,EAAUtS,MAAMoE,IACpDiO,IAAOF,EAAU,IAAMA,EAC7B,CAEAvM,EAAMwM,EACHD,GAAWpJ,EAAOtB,kBAAoB,MAAQyK,GAAMnJ,EAAOrB,mBAC1D0K,EAAa7J,QAAQ,IAAIiK,OAAO,OAASN,EAAK,OAAQ,KACvD,MAAQnJ,EAAOpB,wBAA0B,KACxCyK,GACDD,CACL,CAEA,OAAQpJ,EAAO1B,QAAU,IAAMzB,GAAOmD,EAAOnB,QAAU,GACzD,EAcArB,EAAEkM,WAAa,SAAUC,GACvB,IAAIjJ,EAAGkJ,EAAIC,EAAIC,EAAIzN,EAAG0N,EAAK3O,EAAG4O,EAAIC,EAAIvF,EAAG/I,EAAGH,EAC1CM,EAAIsD,KACJnD,EAAKH,EAAEI,EAET,GAAU,MAANyN,MACFvO,EAAI,IAAI8B,EAAUyM,IAGXjD,cAAgBtL,EAAEc,GAAa,IAARd,EAAEI,IAAYJ,EAAEkM,GAAG3J,IAC/C,MAAMxG,MACHwD,EAAiB,aACfS,EAAEsL,YAAc,iBAAmB,oBAAsBhJ,EAAQtC,IAI1E,IAAKa,EAAI,OAAO,IAAIiB,EAAUpB,GAoB9B,IAlBA4E,EAAI,IAAIxD,EAAUS,GAClBsM,EAAKL,EAAK,IAAI1M,EAAUS,GACxBkM,EAAKG,EAAK,IAAI9M,EAAUS,GACxBnC,EAAIF,EAAcW,GAIlBI,EAAIqE,EAAErE,EAAIb,EAAE9E,OAASoF,EAAEO,EAAI,EAC3BqE,EAAExE,EAAE,GAAKlB,GAAU+O,EAAM1N,EAAIvB,GAAY,EAAIA,EAAWiP,EAAMA,GAC9DJ,GAAMA,GAAMvO,EAAE2K,WAAWrF,GAAK,EAAKrE,EAAI,EAAIqE,EAAIuJ,EAAM7O,EAErD2O,EAAM9L,EACNA,EAAU,IACV7C,EAAI,IAAI8B,EAAU1B,GAGlBwO,EAAG9N,EAAE,GAAK,EAGRwI,EAAIrH,EAAIjC,EAAGsF,EAAG,EAAG,GAEQ,IADzBoJ,EAAKF,EAAG5G,KAAK0B,EAAEkC,MAAMiD,KACd9D,WAAW4D,IAClBC,EAAKC,EACLA,EAAKC,EACLG,EAAKD,EAAGhH,KAAK0B,EAAEkC,MAAMkD,EAAKG,IAC1BD,EAAKF,EACLpJ,EAAItF,EAAEwM,MAAMlD,EAAEkC,MAAMkD,EAAKpJ,IACzBtF,EAAI0O,EAeN,OAZAA,EAAKzM,EAAIsM,EAAG/B,MAAMgC,GAAKC,EAAI,EAAG,GAC9BG,EAAKA,EAAGhH,KAAK8G,EAAGlD,MAAMqD,IACtBL,EAAKA,EAAG5G,KAAK8G,EAAGlD,MAAMiD,IACtBG,EAAGxO,EAAIyO,EAAGzO,EAAIM,EAAEN,EAIhBG,EAAI0B,EAAI4M,EAAIJ,EAHZxN,GAAQ,EAGWwB,GAAe+J,MAAM9L,GAAGgK,MAAMC,WAC7C1I,EAAI2M,EAAIJ,EAAIvN,EAAGwB,GAAe+J,MAAM9L,GAAGgK,OAAS,EAAI,CAACmE,EAAIJ,GAAM,CAACG,EAAIJ,GAExE3L,EAAU8L,EAEHpO,CACT,EAMA6B,EAAE0M,SAAW,WACX,OAAQxM,EAAQ0B,KAClB,EAcA5B,EAAE2M,YAAc,SAAU1J,EAAIR,GAE5B,OADU,MAANQ,GAAYlE,EAASkE,EAAI,EAAGvF,GACzB8E,EAAOZ,KAAMqB,EAAIR,EAAI,EAC9B,EAcAzC,EAAE/G,SAAW,SAAUuF,GACrB,IAAIa,EACFzB,EAAIgE,KACJ5D,EAAIJ,EAAEI,EACNa,EAAIjB,EAAEiB,EA0BR,OAvBU,OAANA,EACEb,GACFqB,EAAM,WACFrB,EAAI,IAAGqB,EAAM,IAAMA,IAEvBA,EAAM,OAGC,MAALb,EACFa,EAAMR,GAAKyB,GAAczB,GAAK0B,EAC3BnB,EAActB,EAAcF,EAAEc,GAAIG,GAClCU,EAAazB,EAAcF,EAAEc,GAAIG,EAAG,KACxB,KAANL,GAAY+C,EAErBlC,EAAME,EAAazB,GADnBF,EAAIuE,EAAM,IAAIzC,EAAU9B,GAAIwC,EAAiBvB,EAAI,EAAGwB,IACjB3B,GAAId,EAAEiB,EAAG,MAE5CE,EAASP,EAAG,EAAG8C,EAASpI,OAAQ,QAChCmG,EAAMS,EAAYP,EAAazB,EAAcF,EAAEc,GAAIG,EAAG,KAAM,GAAIL,EAAGR,GAAG,IAGpEA,EAAI,GAAKJ,EAAEc,EAAE,KAAIW,EAAM,IAAMA,IAG5BA,CACT,EAOAW,EAAEE,QAAUF,EAAE4M,OAAS,WACrB,OAAO1M,EAAQ0B,KACjB,EAGA5B,EAAE6B,cAAe,EAEjB7B,EAAE6M,OAAOC,aAAe,YAGxB9M,EAAE6M,OAAOE,IAAI,+BAAiC/M,EAAEE,QAE5B,MAAhBN,GAAsBF,EAAUwE,IAAItE,GAEjCF,CACT,CAqIuBC,GCn1FJ,IDq1FnB,ECr1FiC,SDq1FjC,MEv1FaqN,EAAQ9Q,IACjB,MAAML,GAASoR,EAAAA,EAAAA,IAAG/Q,IACZ,OAAEF,EAAM,OAAEF,GAAWF,EAAaC,GAElCqR,EAAarR,EAYnB,OAVAqR,EAAWpR,OAAS,CAACvC,EAAgB8C,MACrBP,EAAOvC,EAAQ8C,GAI/B6Q,EAAWlR,OAAS,CAACgR,EAAezT,EAAgB8C,KAChD,MAAMC,EAAM6Q,OAAOH,GACnB,OAAOhR,EAAOM,EAAK/C,EAAQ8C,IAGxB6Q,GCfEE,EAAalR,IACtB,MAAML,GAASM,EAAAA,EAAAA,IAAK,GAAID,IAClB,OAAEF,EAAM,OAAEF,GAAWF,EAAaC,GAElCwR,EAAkBxR,EAYxB,OAVAwR,EAAgBvR,OAAS,CAACvC,EAAgB8C,KACtC,MAAMC,EAAMR,EAAOvC,EAAQ8C,GAC3B,OAAO,IAAIiR,EAAAA,GAAUhR,IAGzB+Q,EAAgBrR,OAAS,CAACoR,EAAsB7T,EAAgB8C,KAC5D,MAAMC,EAAM8Q,EAAUG,WACtB,OAAOvR,EAAOM,EAAK/C,EAAQ8C,IAGxBgR,GCpBJ,IAAKG,GAAZ,SAAYA,GACRA,EAAAA,EAAA,iCACAA,EAAAA,EAAA,eACAA,EAAAA,EAAA,oBACH,CAJD,CAAYA,IAAAA,EAAW,KAKhB,MAAMC,EAAoB,EC6BpBC,GAAiBC,EAAAA,EAAAA,IAAoB,EAC9CV,EAAAA,EAAAA,IAAG,MACHA,EAAAA,EAAAA,IAAG,KACHD,EAAK,iBACLI,EAAU,WACVA,EAAU,WACVA,EAAU,WACVA,EAAU,WACVA,EAAU,WACVA,EAAU,WACVA,EAAU,WACVA,EAAU,WACVA,EAAU,WACVA,EAAU,YACVA,EAAU,cAIDQ,EAAgBF,EAAeG,K,ICNhCC,E,iBAAZ,SAAYA,GACRA,EAAAA,EAAA,iCACAA,EAAAA,EAAA,6BACAA,EAAAA,EAAA,kBACH,CAJD,CAAYA,IAAAA,EAAY,KAsBjB,MAAMC,GAAgBJ,EAAAA,EAAAA,IAAmB,CAC5CP,EAAU,QACVA,EAAU,SACVxQ,EAAI,WACJoR,EAAAA,EAAAA,IAAI,kBACJZ,EAAU,aACVH,EAAAA,EAAAA,IAAG,UACHe,EAAAA,EAAAA,IAAI,kBACJpR,EAAI,YACJA,EAAI,oBACJoR,EAAAA,EAAAA,IAAI,wBACJZ,EAAU,oBAIDa,EAAeF,EAAcF,KAYnCK,eAAeC,EAClBC,EACAC,EACAC,GAC4B,IAA5B1T,EAASC,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAGE,EAAAA,GAGZ,OAAOwT,EAAcF,QADFD,EAAWI,eAAeH,EAASC,GAClB1T,EACxC,CA6DM,SAAU2T,EACZF,EACAI,GAC4B,IAA5B7T,EAASC,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAGE,EAAAA,GAEZ,IAAK0T,EAAM,MAAM,IAAI1U,EACrB,IAAK0U,EAAK/T,MAAMgU,OAAO9T,GAAY,MAAM,IAAIV,EAC7C,GAAIuU,EAAK9S,KAAKzC,OAAS+U,EAAc,MAAM,IAAI9T,EAE/C,MAAMwU,EAAaZ,EAAcjS,OAAO2S,EAAK9S,KAAKlC,MAAM,EAAGwU,IAC3D,IAAIW,EAAU/V,EAAOsC,MAAM,GAC3B,GAAIsT,EAAK9S,KAAKzC,OAAS+U,EAAc,CACjC,GAAIQ,EAAK9S,KAAKzC,SAAW0U,EAAe,MAAM,IAAIzT,EAClD,GAAIsU,EAAK9S,KAAKsS,IAAiBT,EAAYqB,QAAS,MAAM,IAAI5U,EAC9D2U,EAAUH,EAAK9S,KAAKlC,MAAMwU,EAAeR,EAC7C,CAEA,MAAO,CACHY,UACA1T,KAAMgU,EAAWhU,KACjBD,MAAOiU,EAAWjU,MAClBoU,OAAQH,EAAWG,OACnBC,SAAUJ,EAAWK,eAAiBL,EAAWI,SAAW,KAC5DE,gBAAiBN,EAAWM,gBAC5BC,cAAeP,EAAWQ,QAAUrB,EAAasB,cACjDC,SAAUV,EAAWQ,QAAUrB,EAAawB,OAC5CC,WAAYZ,EAAWa,eACvBC,kBAAmBd,EAAWa,eAAiBb,EAAWY,SAAW,KACrEG,eAAgBf,EAAWgB,qBAAuBhB,EAAWe,eAAiB,KAC9Ed,UAER,C,qBChJO,MAAMgB,IAAajC,EAAAA,EAAAA,IAAgB,EACtCK,EAAAA,EAAAA,IAAI,uBACJZ,EAAU,iBACVxQ,EAAI,WACJqQ,EAAAA,EAAAA,IAAG,YACHD,EAAK,kBACLgB,EAAAA,EAAAA,IAAI,yBACJZ,EAAU,qBAIDyC,GAAYD,GAAW/B,KAY7BK,eAAe4B,GAClB1B,EACAC,EACAC,GAC4B,IAA5B1T,EAASC,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAGE,EAAAA,GAGZ,OAYE,SAAqBsT,EAAoBI,GAA8D,IAA5B7T,EAASC,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAGE,EAAAA,GACzF,IAAK0T,EAAM,MAAM,IAAI1U,EACrB,IAAK0U,EAAK/T,MAAMgU,OAAO9T,GAAY,MAAM,IAAIV,EAC7C,GAAIuU,EAAK9S,KAAKzC,OAAS2W,GAAW,MAAM,IAAI1V,EAE5C,MAAM4V,EAAUH,GAAW9T,OAAO2S,EAAK9S,KAAKlC,MAAM,EAAGoW,KACrD,IAAIjB,EAAU/V,GAAOsC,MAAM,GAC3B,GAAIsT,EAAK9S,KAAKzC,OAAS2W,GAAW,CAC9B,GAAIpB,EAAK9S,KAAKzC,QAAU+U,EAAc,MAAM,IAAI9T,EAChD,GAAIsU,EAAK9S,KAAKzC,SAAW0U,EAAe,MAAM,IAAIzT,EAClD,GAAIsU,EAAK9S,KAAKsS,IAAiBT,EAAYwC,KAAM,MAAM,IAAI5V,EAC3DwU,EAAUH,EAAK9S,KAAKlC,MAAMwU,EAAeR,EAC7C,CAEA,MAAO,CACHY,UACA4B,cAAeF,EAAQG,oBAAsBH,EAAQE,cAAgB,KACrEE,OAAQJ,EAAQI,OAChBC,SAAUL,EAAQK,SAClBlB,cAAea,EAAQb,cACvBmB,gBAAiBN,EAAQO,sBAAwBP,EAAQM,gBAAkB,KAC3EzB,UAER,CAnCW2B,CAAWlC,QADCD,EAAWI,eAAeH,EAASC,GACrB1T,EACrC,CA+EOsT,eAAesC,GAClB7V,EACAD,GAGsD,IAFtD+V,EAAkB5V,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,IAAAA,UAAA,GAClBD,EAASC,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAGE,EAAAA,GACZC,EAAwBH,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAGI,EAAAA,GAE3B,IAAKwV,IAAuBnD,EAAAA,GAAUoD,UAAUhW,EAAM6S,YAAa,MAAM,IAAIjT,EAE7E,MAAO+T,SAAiBf,EAAAA,GAAUqD,mBAC9B,CAACjW,EAAM6S,WAAY3S,EAAU2S,WAAY5S,EAAK4S,YAC9CvS,GAGJ,OAAOqT,CACX,CCnJOH,eAAe0C,GAClBxC,EACA5T,EACAG,EACAD,GAKsD,IAJtD+V,EAAkB5V,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,IAAAA,UAAA,GAClByT,EAAuBzT,UAAA3B,OAAA,EAAA2B,UAAA,QAAAC,EACvB+V,EAA+BhW,UAAA3B,OAAA,EAAA2B,UAAA,QAAAC,EAC/BF,EAASC,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAGE,EAAAA,GACZC,EAAwBH,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAGI,EAAAA,GAE3B,MAAMR,EDqJJ,SACFE,EACAD,GAGsD,IAFtD+V,EAAkB5V,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,IAAAA,UAAA,GAClBD,EAASC,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAGE,EAAAA,GACZC,EAAwBH,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAGI,EAAAA,GAE3B,IAAKwV,IAAuBnD,EAAAA,GAAUoD,UAAUhW,EAAM6S,YAAa,MAAM,IAAIjT,EAE7E,MAAO+T,GAAWf,EAAAA,GAAUwD,uBACxB,CAACpW,EAAM6S,WAAY3S,EAAU2S,WAAY5S,EAAK4S,YAC9CvS,GAGJ,OAAOqT,CACX,CCpK4B0C,CACpBpW,EACAD,EACA+V,EACA7V,EACAI,GAKJ,IAAIgW,EACJ,IACIA,QAAgB7C,EAAWC,EAAY3T,EAAiB6T,EAAY1T,EACxE,CAAE,MAAOqW,GAIL,KAAIA,aAAiBlX,GAA6BkX,aAAiB/W,GAuB/D,MAAM+W,EArBN,IACI,MAAMC,GAAc,IAAIC,EAAAA,IAAcC,IAClC7W,EACIC,EAAM4S,UACN3S,EACAC,EACAC,EACAC,EACAI,UAIFqW,EAAAA,EAAAA,IAA0BjD,EAAY8C,EAAa,CAAC1W,GAAQqW,EACtE,CAAE,MAAOI,GAEL,CAIJD,QAAgB7C,EAAWC,EAAY3T,EAAiB6T,EAAY1T,EAI5E,CAEA,IAAKoW,EAAQrW,KAAK+T,OAAO/T,GAAO,MAAM,IAAIP,EAC1C,IAAK4W,EAAQtW,MAAMgU,OAAOhU,GAAQ,MAAM,IAAIL,EAE5C,OAAO2W,CACX,CCpFM,SAAUM,GACZjW,EACAkW,EACAC,GAEA,GAAIA,EAAatY,OAAQ,CACrBmC,EAAKkH,KAAK,CAAEjH,OAAQiW,EAAkBhW,UAAU,EAAOC,YAAY,IACnE,IAAK,MAAMiW,KAAUD,EACjBnW,EAAKkH,KAAK,CACNjH,OAAQmW,aAAkBnE,EAAAA,GAAYmE,EAASA,EAAOrE,UACtD7R,UAAU,EACVC,YAAY,GAGxB,MACIH,EAAKkH,KAAK,CAAEjH,OAAQiW,EAAkBhW,UAAU,EAAMC,YAAY,IAEtE,OAAOH,CACX,CCrBO,IAAKqW,IAAZ,SAAYA,GACRA,EAAAA,EAAA,mCACAA,EAAAA,EAAA,yCACAA,EAAAA,EAAA,2CACAA,EAAAA,EAAA,uBACAA,EAAAA,EAAA,qBACAA,EAAAA,EAAA,mBACAA,EAAAA,EAAA,+BACAA,EAAAA,EAAA,mBACAA,EAAAA,EAAA,eACAA,EAAAA,EAAA,+BACAA,EAAAA,EAAA,kCACAA,EAAAA,EAAA,8BACAA,EAAAA,EAAA,sCACAA,EAAAA,EAAA,oCACAA,EAAAA,EAAA,kCACAA,EAAAA,EAAA,8BACAA,EAAAA,EAAA,4CACAA,EAAAA,EAAA,4BACAA,EAAAA,EAAA,4CACAA,EAAAA,EAAA,8CACAA,EAAAA,EAAA,sCACAA,EAAAA,EAAA,4CACAA,EAAAA,EAAA,wDACAA,EAAAA,EAAA,wCACAA,EAAAA,EAAA,wCACAA,EAAAA,EAAA,gEACAA,EAAAA,EAAA,gDACAA,EAAAA,EAAA,kEACAA,EAAAA,EAAA,gEACAA,EAAAA,EAAA,4BACAA,EAAAA,EAAA,kDACAA,EAAAA,EAAA,wCACAA,EAAAA,EAAA,kEACAA,EAAAA,EAAA,gEACAA,EAAAA,EAAA,0CACAA,EAAAA,EAAA,8DACAA,EAAAA,EAAA,kDAGAA,EAAAA,EAAA,wDACAA,EAAAA,EAAA,kDACAA,EAAAA,EAAA,8DAEAA,EAAAA,EAAA,sDACAA,EAAAA,EAAA,yCACH,CA9CD,CAAYA,KAAAA,GAAgB,K,qBCoBrB,MAAMC,IAA0BhE,EAAAA,EAAAA,IAAgC,EAACV,EAAAA,EAAAA,IAAG,eAAgBrQ,EAAI,YAczF,SAAUgV,GACZC,EACAC,EACApX,EACAoU,GAE4B,IAD5B0C,EAAA3W,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAuC,GACvCD,EAASC,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAGE,EAAAA,GAEZ,MAAMM,EAAOiW,GACT,CACI,CAAEhW,OAAQuW,EAAQtW,UAAU,EAAOC,YAAY,GAC/C,CAAEF,OAAQwW,EAAavW,UAAU,EAAOC,YAAY,IAExDd,EACA8W,GAGE7V,EAAO9C,GAAOsC,MAAMwW,GAAwB9D,MASlD,OARA8D,GAAwB3V,OACpB,CACI+V,YAAaL,GAAiBM,SAC9BlD,OAAQ3V,OAAO2V,IAEnBnT,GAGG,IAAID,EAAAA,GAAuB,CAAEL,OAAMT,YAAWe,QACzD,C,qBC3CO,MAAMsW,IAA8BtE,EAAAA,EAAAA,IAAoC,EAACV,EAAAA,EAAAA,IAAG,iBAa7E,SAAUiF,GACZlB,EACAc,EACAK,GAE4B,IAD5BX,EAAA3W,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAuC,GACvCD,EAASC,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAGE,EAAAA,GAEZ,MAAMM,EAAOiW,GACT,CACI,CAAEhW,OAAQ0V,EAASzV,UAAU,EAAOC,YAAY,GAChD,CAAEF,OAAQwW,EAAavW,UAAU,EAAOC,YAAY,IAExD2W,EACAX,GAGE7V,EAAO9C,GAAOsC,MAAM8W,GAA4BpE,MAGtD,OAFAoE,GAA4BjW,OAAO,CAAE+V,YAAaL,GAAiBU,cAAgBzW,GAE5E,IAAID,EAAAA,GAAuB,CAAEL,OAAMT,YAAWe,QACzD,C,qBClCO,MAAM0W,IAA4B1E,EAAAA,EAAAA,IAAkC,EAACV,EAAAA,EAAAA,IAAG,iBAUzE,SAAUqF,GAA4BtB,GAAgD,IAA5BpW,EAASC,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAGE,EAAAA,GACxE,MAAMM,EAAO,CAAC,CAAEC,OAAQ0V,EAASzV,UAAU,EAAOC,YAAY,IAExDG,EAAO9C,GAAOsC,MAAMkX,GAA0BxE,MAGpD,OAFAwE,GAA0BrW,OAAO,CAAE+V,YAAaL,GAAiBa,YAAc5W,GAExE,IAAID,EAAAA,GAAuB,CAAEL,OAAMT,YAAWe,QACzD,C","sources":["../node_modules/bigint-buffer/dist/browser.js","../node_modules/@solana/spl-token/src/errors.ts","../node_modules/@solana/spl-token/src/instructions/associatedTokenAccount.ts","../node_modules/@solana/buffer-layout-utils/src/base.ts","../node_modules/@solana/buffer-layout-utils/src/bigint.ts","../node_modules/bignumber.js/bignumber.mjs","../node_modules/@solana/buffer-layout-utils/src/decimal.ts","../node_modules/@solana/buffer-layout-utils/src/native.ts","../node_modules/@solana/buffer-layout-utils/src/web3.ts","../node_modules/@solana/spl-token/src/extensions/accountType.ts","../node_modules/@solana/spl-token/src/state/multisig.ts","../node_modules/@solana/spl-token/src/state/account.ts","../node_modules/@solana/spl-token/src/state/mint.ts","../node_modules/@solana/spl-token/src/actions/getOrCreateAssociatedTokenAccount.ts","../node_modules/@solana/spl-token/src/instructions/internal.ts","../node_modules/@solana/spl-token/src/instructions/types.ts","../node_modules/@solana/spl-token/src/instructions/transfer.ts","../node_modules/@solana/spl-token/src/instructions/closeAccount.ts","../node_modules/@solana/spl-token/src/instructions/syncNative.ts"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n","/** Base class for errors */\nexport abstract class TokenError extends Error {\n    constructor(message?: string) {\n        super(message);\n    }\n}\n\n/** Thrown if an account is not found at the expected address */\nexport class TokenAccountNotFoundError extends TokenError {\n    name = 'TokenAccountNotFoundError';\n}\n\n/** Thrown if a program state account is not a valid Account */\nexport class TokenInvalidAccountError extends TokenError {\n    name = 'TokenInvalidAccountError';\n}\n\n/** Thrown if a program state account does not contain valid data */\nexport class TokenInvalidAccountDataError extends TokenError {\n    name = 'TokenInvalidAccountDataError';\n}\n\n/** Thrown if a program state account is not owned by the expected token program */\nexport class TokenInvalidAccountOwnerError extends TokenError {\n    name = 'TokenInvalidAccountOwnerError';\n}\n\n/** Thrown if the byte length of an program state account doesn't match the expected size */\nexport class TokenInvalidAccountSizeError extends TokenError {\n    name = 'TokenInvalidAccountSizeError';\n}\n\n/** Thrown if the mint of a token account doesn't match the expected mint */\nexport class TokenInvalidMintError extends TokenError {\n    name = 'TokenInvalidMintError';\n}\n\n/** Thrown if the owner of a token account doesn't match the expected owner */\nexport class TokenInvalidOwnerError extends TokenError {\n    name = 'TokenInvalidOwnerError';\n}\n\n/** Thrown if the owner of a token account is a PDA (Program Derived Address) */\nexport class TokenOwnerOffCurveError extends TokenError {\n    name = 'TokenOwnerOffCurveError';\n}\n\n/** Thrown if an instruction's program is invalid */\nexport class TokenInvalidInstructionProgramError extends TokenError {\n    name = 'TokenInvalidInstructionProgramError';\n}\n\n/** Thrown if an instruction's keys are invalid */\nexport class TokenInvalidInstructionKeysError extends TokenError {\n    name = 'TokenInvalidInstructionKeysError';\n}\n\n/** Thrown if an instruction's data is invalid */\nexport class TokenInvalidInstructionDataError extends TokenError {\n    name = 'TokenInvalidInstructionDataError';\n}\n\n/** Thrown if an instruction's type is invalid */\nexport class TokenInvalidInstructionTypeError extends TokenError {\n    name = 'TokenInvalidInstructionTypeError';\n}\n\n/** Thrown if the program does not support the desired instruction */\nexport class TokenUnsupportedInstructionError extends TokenError {\n    name = 'TokenUnsupportedInstructionError';\n}\n\n/** Thrown if the transfer hook extra accounts contains an invalid account index */\nexport class TokenTransferHookAccountNotFound extends TokenError {\n    name = 'TokenTransferHookAccountNotFound';\n}\n\n/** Thrown if the transfer hook extra accounts contains an invalid seed */\nexport class TokenTransferHookInvalidSeed extends TokenError {\n    name = 'TokenTransferHookInvalidSeed';\n}\n\n/** Thrown if account data required by an extra account meta seed config could not be fetched */\nexport class TokenTransferHookAccountDataNotFound extends TokenError {\n    name = 'TokenTransferHookAccountDataNotFound';\n}\n\n/** Thrown if pubkey data extra accounts config is invalid */\nexport class TokenTransferHookInvalidPubkeyData extends TokenError {\n    name = 'TokenTransferHookInvalidPubkeyData';\n}\n\n/** Thrown if pubkey data source is too small for a pubkey */\nexport class TokenTransferHookPubkeyDataTooSmall extends TokenError {\n    name = 'TokenTransferHookPubkeyDataTooSmall';\n}\n","import type { PublicKey } from '@solana/web3.js';\nimport { SystemProgram, TransactionInstruction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\nimport { getAssociatedTokenAddressSync } from '../state/mint.js';\n\n/**\n * Construct a CreateAssociatedTokenAccount instruction\n *\n * @param payer                    Payer of the initialization fees\n * @param associatedToken          New associated token account\n * @param owner                    Owner of the new account\n * @param mint                     Token mint account\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createAssociatedTokenAccountInstruction(\n    payer: PublicKey,\n    associatedToken: PublicKey,\n    owner: PublicKey,\n    mint: PublicKey,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID,\n): TransactionInstruction {\n    return buildAssociatedTokenAccountInstruction(\n        payer,\n        associatedToken,\n        owner,\n        mint,\n        Buffer.alloc(0),\n        programId,\n        associatedTokenProgramId,\n    );\n}\n\n/**\n * Construct a CreateAssociatedTokenAccountIdempotent instruction\n *\n * @param payer                    Payer of the initialization fees\n * @param associatedToken          New associated token account\n * @param owner                    Owner of the new account\n * @param mint                     Token mint account\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createAssociatedTokenAccountIdempotentInstruction(\n    payer: PublicKey,\n    associatedToken: PublicKey,\n    owner: PublicKey,\n    mint: PublicKey,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID,\n): TransactionInstruction {\n    return buildAssociatedTokenAccountInstruction(\n        payer,\n        associatedToken,\n        owner,\n        mint,\n        Buffer.from([1]),\n        programId,\n        associatedTokenProgramId,\n    );\n}\n\n/**\n * Derive the associated token account and construct a CreateAssociatedTokenAccountIdempotent instruction\n *\n * @param payer                    Payer of the initialization fees\n * @param owner                    Owner of the new account\n * @param mint                     Token mint account\n * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createAssociatedTokenAccountIdempotentInstructionWithDerivation(\n    payer: PublicKey,\n    owner: PublicKey,\n    mint: PublicKey,\n    allowOwnerOffCurve = true,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID,\n) {\n    const associatedToken = getAssociatedTokenAddressSync(mint, owner, allowOwnerOffCurve);\n\n    return createAssociatedTokenAccountIdempotentInstruction(\n        payer,\n        associatedToken,\n        owner,\n        mint,\n        programId,\n        associatedTokenProgramId,\n    );\n}\n\nfunction buildAssociatedTokenAccountInstruction(\n    payer: PublicKey,\n    associatedToken: PublicKey,\n    owner: PublicKey,\n    mint: PublicKey,\n    instructionData: Buffer,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID,\n): TransactionInstruction {\n    const keys = [\n        { pubkey: payer, isSigner: true, isWritable: true },\n        { pubkey: associatedToken, isSigner: false, isWritable: true },\n        { pubkey: owner, isSigner: false, isWritable: false },\n        { pubkey: mint, isSigner: false, isWritable: false },\n        { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n        { pubkey: programId, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n        keys,\n        programId: associatedTokenProgramId,\n        data: instructionData,\n    });\n}\n\n/**\n * Construct a RecoverNested instruction\n *\n * @param nestedAssociatedToken             Nested associated token account (must be owned by `ownerAssociatedToken`)\n * @param nestedMint                        Token mint for the nested associated token account\n * @param destinationAssociatedToken        Wallet's associated token account\n * @param ownerAssociatedToken              Owner associated token account address (must be owned by `owner`)\n * @param ownerMint                         Token mint for the owner associated token account\n * @param owner                             Wallet address for the owner associated token account\n * @param programId                         SPL Token program account\n * @param associatedTokenProgramId          SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createRecoverNestedInstruction(\n    nestedAssociatedToken: PublicKey,\n    nestedMint: PublicKey,\n    destinationAssociatedToken: PublicKey,\n    ownerAssociatedToken: PublicKey,\n    ownerMint: PublicKey,\n    owner: PublicKey,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID,\n): TransactionInstruction {\n    const keys = [\n        { pubkey: nestedAssociatedToken, isSigner: false, isWritable: true },\n        { pubkey: nestedMint, isSigner: false, isWritable: false },\n        { pubkey: destinationAssociatedToken, isSigner: false, isWritable: true },\n        { pubkey: ownerAssociatedToken, isSigner: false, isWritable: true },\n        { pubkey: ownerMint, isSigner: false, isWritable: false },\n        { pubkey: owner, isSigner: true, isWritable: true },\n        { pubkey: programId, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n        keys,\n        programId: associatedTokenProgramId,\n        data: Buffer.from([2]),\n    });\n}\n","import { Layout } from '@solana/buffer-layout';\n\nexport interface EncodeDecode<T> {\n    decode(buffer: Buffer, offset?: number): T;\n    encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nexport const encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n    const decode = layout.decode.bind(layout);\n    const encode = layout.encode.bind(layout);\n    return { decode, encode };\n};\n","import { blob, Layout } from '@solana/buffer-layout';\nimport { toBigIntBE, toBigIntLE, toBufferBE, toBufferLE } from 'bigint-buffer';\nimport { encodeDecode } from './base';\n\nexport const bigInt =\n    (length: number) =>\n    (property?: string): Layout<bigint> => {\n        const layout = blob(length, property);\n        const { encode, decode } = encodeDecode(layout);\n\n        const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n        bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n            const src = decode(buffer, offset);\n            return toBigIntLE(Buffer.from(src));\n        };\n\n        bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n            const src = toBufferLE(bigInt, length);\n            return encode(src, buffer, offset);\n        };\n\n        return bigIntLayout;\n    };\n\nexport const bigIntBE =\n    (length: number) =>\n    (property?: string): Layout<bigint> => {\n        const layout = blob(length, property);\n        const { encode, decode } = encodeDecode(layout);\n\n        const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n        bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n            const src = decode(buffer, offset);\n            return toBigIntBE(Buffer.from(src));\n        };\n\n        bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n            const src = toBufferBE(bigInt, length);\n            return encode(src, buffer, offset);\n        };\n\n        return bigIntLayout;\n    };\n\nexport const u64 = bigInt(8);\n\nexport const u64be = bigIntBE(8);\n\nexport const u128 = bigInt(16);\n\nexport const u128be = bigIntBE(16);\n\nexport const u192 = bigInt(24);\n\nexport const u192be = bigIntBE(24);\n\nexport const u256 = bigInt(32);\n\nexport const u256be = bigIntBE(32);\n","/*\r\n *      bignumber.js v9.3.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2025 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\nvar\r\n  isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n  mathceil = Math.ceil,\r\n  mathfloor = Math.floor,\r\n\r\n  bignumberError = '[BigNumber Error] ',\r\n  tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n  BASE = 1e14,\r\n  LOG_BASE = 14,\r\n  MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n  SQRT_BASE = 1e7,\r\n\r\n  // EDITABLE\r\n  // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n  // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n  MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n/*\r\n * Create and return a BigNumber constructor.\r\n */\r\nfunction clone(configObject) {\r\n  var div, convertBase, parseNumeric,\r\n    P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n    ONE = new BigNumber(1),\r\n\r\n\r\n    //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n    // The default values below must be integers within the inclusive ranges stated.\r\n    // The values can also be changed at run-time using BigNumber.set.\r\n\r\n    // The maximum number of decimal places for operations involving division.\r\n    DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n    // The rounding mode used when rounding to the above decimal places, and when using\r\n    // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n    // UP         0 Away from zero.\r\n    // DOWN       1 Towards zero.\r\n    // CEIL       2 Towards +Infinity.\r\n    // FLOOR      3 Towards -Infinity.\r\n    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n    // The exponent value at and beneath which toString returns exponential notation.\r\n    // Number type: -7\r\n    TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n    // The exponent value at and above which toString returns exponential notation.\r\n    // Number type: 21\r\n    TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n    // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n    // The minimum exponent value, beneath which underflow to zero occurs.\r\n    // Number type: -324  (5e-324)\r\n    MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n    // The maximum exponent value, above which overflow to Infinity occurs.\r\n    // Number type:  308  (1.7976931348623157e+308)\r\n    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n    MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n    // Whether to use cryptographically-secure random number generation, if available.\r\n    CRYPTO = false,                          // true or false\r\n\r\n    // The modulo mode used when calculating the modulus: a mod n.\r\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n    // The remainder (r) is calculated as: r = a - n * q.\r\n    //\r\n    // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n    // DOWN      1 The remainder has the same sign as the dividend.\r\n    //             This modulo mode is commonly known as 'truncated division' and is\r\n    //             equivalent to (a % n) in JavaScript.\r\n    // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n    //             The remainder is always positive.\r\n    //\r\n    // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n    // modes are commonly used for the modulus operation.\r\n    // Although the other rounding modes can also be used, they may not give useful results.\r\n    MODULO_MODE = 1,                         // 0 to 9\r\n\r\n    // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n    // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n    POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n    // The format specification used by the BigNumber.prototype.toFormat method.\r\n    FORMAT = {\r\n      prefix: '',\r\n      groupSize: 3,\r\n      secondaryGroupSize: 0,\r\n      groupSeparator: ',',\r\n      decimalSeparator: '.',\r\n      fractionGroupSize: 0,\r\n      fractionGroupSeparator: '\\xA0',        // non-breaking space\r\n      suffix: ''\r\n    },\r\n\r\n    // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n    // '-', '.', whitespace, or repeated character.\r\n    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\r\n    alphabetHasNormalDecimalDigits = true;\r\n\r\n\r\n  //------------------------------------------------------------------------------------------\r\n\r\n\r\n  // CONSTRUCTOR\r\n\r\n\r\n  /*\r\n   * The BigNumber constructor and exported function.\r\n   * Create and return a new instance of a BigNumber object.\r\n   *\r\n   * v {number|string|BigNumber} A numeric value.\r\n   * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n   */\r\n  function BigNumber(v, b) {\r\n    var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n      x = this;\r\n\r\n    // Enable constructor call without `new`.\r\n    if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n    if (b == null) {\r\n\r\n      if (v && v._isBigNumber === true) {\r\n        x.s = v.s;\r\n\r\n        if (!v.c || v.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n        } else if (v.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = v.e;\r\n          x.c = v.c.slice();\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n        // Use `1 / n` to handle minus zero also.\r\n        x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n        // Fast path for integers, where n < 2147483648 (2**31).\r\n        if (v === ~~v) {\r\n          for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n          if (e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else {\r\n            x.e = e;\r\n            x.c = [v];\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        str = String(v);\r\n      } else {\r\n\r\n        if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n        x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n      // Exponential form?\r\n      if ((i = str.search(/e/i)) > 0) {\r\n\r\n        // Determine exponent.\r\n        if (e < 0) e = i;\r\n        e += +str.slice(i + 1);\r\n        str = str.substring(0, i);\r\n      } else if (e < 0) {\r\n\r\n        // Integer.\r\n        e = str.length;\r\n      }\r\n\r\n    } else {\r\n\r\n      // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n      intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n      // Allow exponential notation to be used with base 10 argument, while\r\n      // also rounding to DECIMAL_PLACES as with other bases.\r\n      if (b == 10 && alphabetHasNormalDecimalDigits) {\r\n        x = new BigNumber(v);\r\n        return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n      }\r\n\r\n      str = String(v);\r\n\r\n      if (isNum = typeof v == 'number') {\r\n\r\n        // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n        if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n        x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n          throw Error\r\n           (tooManyDigits + v);\r\n        }\r\n      } else {\r\n        x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      alphabet = ALPHABET.slice(0, b);\r\n      e = i = 0;\r\n\r\n      // Check that str is a valid base b number.\r\n      // Don't use RegExp, so alphabet can contain special characters.\r\n      for (len = str.length; i < len; i++) {\r\n        if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n          if (c == '.') {\r\n\r\n            // If '.' is not the first character and it has not be found before.\r\n            if (i > e) {\r\n              e = len;\r\n              continue;\r\n            }\r\n          } else if (!caseChanged) {\r\n\r\n            // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n            if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n              caseChanged = true;\r\n              i = -1;\r\n              e = 0;\r\n              continue;\r\n            }\r\n          }\r\n\r\n          return parseNumeric(x, String(v), isNum, b);\r\n        }\r\n      }\r\n\r\n      // Prevent later check for length on converted number.\r\n      isNum = false;\r\n      str = convertBase(str, b, 10, x.s);\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n      else e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n    if (str = str.slice(i, ++len)) {\r\n      len -= i;\r\n\r\n      // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n      if (isNum && BigNumber.DEBUG &&\r\n        len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n          throw Error\r\n           (tooManyDigits + (x.s * v));\r\n      }\r\n\r\n       // Overflow?\r\n      if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        x.c = x.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      } else {\r\n        x.e = e;\r\n        x.c = [];\r\n\r\n        // Transform base\r\n\r\n        // e is the base 10 exponent.\r\n        // i is where to slice str to get the first element of the coefficient array.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n        if (i < len) {\r\n          if (i) x.c.push(+str.slice(0, i));\r\n\r\n          for (len -= LOG_BASE; i < len;) {\r\n            x.c.push(+str.slice(i, i += LOG_BASE));\r\n          }\r\n\r\n          i = LOG_BASE - (str = str.slice(i)).length;\r\n        } else {\r\n          i -= len;\r\n        }\r\n\r\n        for (; i--; str += '0');\r\n        x.c.push(+str);\r\n      }\r\n    } else {\r\n\r\n      // Zero.\r\n      x.c = [x.e = 0];\r\n    }\r\n  }\r\n\r\n\r\n  // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n  BigNumber.clone = clone;\r\n\r\n  BigNumber.ROUND_UP = 0;\r\n  BigNumber.ROUND_DOWN = 1;\r\n  BigNumber.ROUND_CEIL = 2;\r\n  BigNumber.ROUND_FLOOR = 3;\r\n  BigNumber.ROUND_HALF_UP = 4;\r\n  BigNumber.ROUND_HALF_DOWN = 5;\r\n  BigNumber.ROUND_HALF_EVEN = 6;\r\n  BigNumber.ROUND_HALF_CEIL = 7;\r\n  BigNumber.ROUND_HALF_FLOOR = 8;\r\n  BigNumber.EUCLID = 9;\r\n\r\n\r\n  /*\r\n   * Configure infrequently-changing library-wide settings.\r\n   *\r\n   * Accept an object with the following optional properties (if the value of a property is\r\n   * a number, it must be an integer within the inclusive range stated):\r\n   *\r\n   *   DECIMAL_PLACES   {number}           0 to MAX\r\n   *   ROUNDING_MODE    {number}           0 to 8\r\n   *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n   *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n   *   CRYPTO           {boolean}          true or false\r\n   *   MODULO_MODE      {number}           0 to 9\r\n   *   POW_PRECISION       {number}           0 to MAX\r\n   *   ALPHABET         {string}           A string of two or more unique characters which does\r\n   *                                       not contain '.'.\r\n   *   FORMAT           {object}           An object with some of the following properties:\r\n   *     prefix                 {string}\r\n   *     groupSize              {number}\r\n   *     secondaryGroupSize     {number}\r\n   *     groupSeparator         {string}\r\n   *     decimalSeparator       {string}\r\n   *     fractionGroupSize      {number}\r\n   *     fractionGroupSeparator {string}\r\n   *     suffix                 {string}\r\n   *\r\n   * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n   *\r\n   * E.g.\r\n   * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n   *\r\n   * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n   *\r\n   * Return an object with the properties current values.\r\n   */\r\n  BigNumber.config = BigNumber.set = function (obj) {\r\n    var p, v;\r\n\r\n    if (obj != null) {\r\n\r\n      if (typeof obj == 'object') {\r\n\r\n        // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          DECIMAL_PLACES = v;\r\n        }\r\n\r\n        // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n        // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 8, p);\r\n          ROUNDING_MODE = v;\r\n        }\r\n\r\n        // EXPONENTIAL_AT {number|number[]}\r\n        // Integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n        // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, 0, p);\r\n            intCheck(v[1], 0, MAX, p);\r\n            TO_EXP_NEG = v[0];\r\n            TO_EXP_POS = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n          }\r\n        }\r\n\r\n        // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n        // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n        if (obj.hasOwnProperty(p = 'RANGE')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, -1, p);\r\n            intCheck(v[1], 1, MAX, p);\r\n            MIN_EXP = v[0];\r\n            MAX_EXP = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            if (v) {\r\n              MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' cannot be zero: ' + v);\r\n            }\r\n          }\r\n        }\r\n\r\n        // CRYPTO {boolean} true or false.\r\n        // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n        // '[BigNumber Error] crypto unavailable'\r\n        if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n          v = obj[p];\r\n          if (v === !!v) {\r\n            if (v) {\r\n              if (typeof crypto != 'undefined' && crypto &&\r\n               (crypto.getRandomValues || crypto.randomBytes)) {\r\n                CRYPTO = v;\r\n              } else {\r\n                CRYPTO = !v;\r\n                throw Error\r\n                 (bignumberError + 'crypto unavailable');\r\n              }\r\n            } else {\r\n              CRYPTO = v;\r\n            }\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' not true or false: ' + v);\r\n          }\r\n        }\r\n\r\n        // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n        // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 9, p);\r\n          MODULO_MODE = v;\r\n        }\r\n\r\n        // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          POW_PRECISION = v;\r\n        }\r\n\r\n        // FORMAT {object}\r\n        // '[BigNumber Error] FORMAT not an object: {v}'\r\n        if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n          v = obj[p];\r\n          if (typeof v == 'object') FORMAT = v;\r\n          else throw Error\r\n           (bignumberError + p + ' not an object: ' + v);\r\n        }\r\n\r\n        // ALPHABET {string}\r\n        // '[BigNumber Error] ALPHABET invalid: {v}'\r\n        if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n          v = obj[p];\r\n\r\n          // Disallow if less than two characters,\r\n          // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n          if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n            alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\r\n            ALPHABET = v;\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' invalid: ' + v);\r\n          }\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Object expected: {v}'\r\n        throw Error\r\n         (bignumberError + 'Object expected: ' + obj);\r\n      }\r\n    }\r\n\r\n    return {\r\n      DECIMAL_PLACES: DECIMAL_PLACES,\r\n      ROUNDING_MODE: ROUNDING_MODE,\r\n      EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n      RANGE: [MIN_EXP, MAX_EXP],\r\n      CRYPTO: CRYPTO,\r\n      MODULO_MODE: MODULO_MODE,\r\n      POW_PRECISION: POW_PRECISION,\r\n      FORMAT: FORMAT,\r\n      ALPHABET: ALPHABET\r\n    };\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if v is a BigNumber instance, otherwise return false.\r\n   *\r\n   * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n   *\r\n   * v {any}\r\n   *\r\n   * '[BigNumber Error] Invalid BigNumber: {v}'\r\n   */\r\n  BigNumber.isBigNumber = function (v) {\r\n    if (!v || v._isBigNumber !== true) return false;\r\n    if (!BigNumber.DEBUG) return true;\r\n\r\n    var i, n,\r\n      c = v.c,\r\n      e = v.e,\r\n      s = v.s;\r\n\r\n    out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n      if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n        // If the first element is zero, the BigNumber value must be zero.\r\n        if (c[0] === 0) {\r\n          if (e === 0 && c.length === 1) return true;\r\n          break out;\r\n        }\r\n\r\n        // Calculate number of digits that c[0] should have, based on the exponent.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (i < 1) i += LOG_BASE;\r\n\r\n        // Calculate number of digits of c[0].\r\n        //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n        if (String(c[0]).length == i) {\r\n\r\n          for (i = 0; i < c.length; i++) {\r\n            n = c[i];\r\n            if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n          }\r\n\r\n          // Last element cannot be zero, unless it is the only element.\r\n          if (n !== 0) return true;\r\n        }\r\n      }\r\n\r\n    // Infinity/NaN\r\n    } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n      return true;\r\n    }\r\n\r\n    throw Error\r\n      (bignumberError + 'Invalid BigNumber: ' + v);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.maximum = BigNumber.max = function () {\r\n    return maxOrMin(arguments, -1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.minimum = BigNumber.min = function () {\r\n    return maxOrMin(arguments, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n   * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n   * zeros are produced).\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n   * '[BigNumber Error] crypto unavailable'\r\n   */\r\n  BigNumber.random = (function () {\r\n    var pow2_53 = 0x20000000000000;\r\n\r\n    // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n    // Check if Math.random() produces more than 32 bits of randomness.\r\n    // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n    // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n    var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n     ? function () { return mathfloor(Math.random() * pow2_53); }\r\n     : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n       (Math.random() * 0x800000 | 0); };\r\n\r\n    return function (dp) {\r\n      var a, b, e, k, v,\r\n        i = 0,\r\n        c = [],\r\n        rand = new BigNumber(ONE);\r\n\r\n      if (dp == null) dp = DECIMAL_PLACES;\r\n      else intCheck(dp, 0, MAX);\r\n\r\n      k = mathceil(dp / LOG_BASE);\r\n\r\n      if (CRYPTO) {\r\n\r\n        // Browsers supporting crypto.getRandomValues.\r\n        if (crypto.getRandomValues) {\r\n\r\n          a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n          for (; i < k;) {\r\n\r\n            // 53 bits:\r\n            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n            //                                     11111 11111111 11111111\r\n            // 0x20000 is 2^21.\r\n            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n            // Rejection sampling:\r\n            // 0 <= v < 9007199254740992\r\n            // Probability that v >= 9e15, is\r\n            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n            if (v >= 9e15) {\r\n              b = crypto.getRandomValues(new Uint32Array(2));\r\n              a[i] = b[0];\r\n              a[i + 1] = b[1];\r\n            } else {\r\n\r\n              // 0 <= v <= 8999999999999999\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 2;\r\n            }\r\n          }\r\n          i = k / 2;\r\n\r\n        // Node.js supporting crypto.randomBytes.\r\n        } else if (crypto.randomBytes) {\r\n\r\n          // buffer\r\n          a = crypto.randomBytes(k *= 7);\r\n\r\n          for (; i < k;) {\r\n\r\n            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n            // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n            // 0 <= v < 9007199254740992\r\n            v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n               (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n               (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n            if (v >= 9e15) {\r\n              crypto.randomBytes(7).copy(a, i);\r\n            } else {\r\n\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 7;\r\n            }\r\n          }\r\n          i = k / 7;\r\n        } else {\r\n          CRYPTO = false;\r\n          throw Error\r\n           (bignumberError + 'crypto unavailable');\r\n        }\r\n      }\r\n\r\n      // Use Math.random.\r\n      if (!CRYPTO) {\r\n\r\n        for (; i < k;) {\r\n          v = random53bitInt();\r\n          if (v < 9e15) c[i++] = v % 1e14;\r\n        }\r\n      }\r\n\r\n      k = c[--i];\r\n      dp %= LOG_BASE;\r\n\r\n      // Convert trailing digits to zeros according to dp.\r\n      if (k && dp) {\r\n        v = POWS_TEN[LOG_BASE - dp];\r\n        c[i] = mathfloor(k / v) * v;\r\n      }\r\n\r\n      // Remove trailing elements which are zero.\r\n      for (; c[i] === 0; c.pop(), i--);\r\n\r\n      // Zero?\r\n      if (i < 0) {\r\n        c = [e = 0];\r\n      } else {\r\n\r\n        // Remove leading elements which are zero and adjust exponent accordingly.\r\n        for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n        // Count the digits of the first element of c to determine leading zeros, and...\r\n        for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n        // adjust the exponent accordingly.\r\n        if (i < LOG_BASE) e -= LOG_BASE - i;\r\n      }\r\n\r\n      rand.e = e;\r\n      rand.c = c;\r\n      return rand;\r\n    };\r\n  })();\r\n\r\n\r\n   /*\r\n   * Return a BigNumber whose value is the sum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.sum = function () {\r\n    var i = 1,\r\n      args = arguments,\r\n      sum = new BigNumber(args[0]);\r\n    for (; i < args.length;) sum = sum.plus(args[i++]);\r\n    return sum;\r\n  };\r\n\r\n\r\n  // PRIVATE FUNCTIONS\r\n\r\n\r\n  // Called by BigNumber and BigNumber.prototype.toString.\r\n  convertBase = (function () {\r\n    var decimal = '0123456789';\r\n\r\n    /*\r\n     * Convert string of baseIn to an array of numbers of baseOut.\r\n     * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n     * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n     */\r\n    function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n      var j,\r\n        arr = [0],\r\n        arrL,\r\n        i = 0,\r\n        len = str.length;\r\n\r\n      for (; i < len;) {\r\n        for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n        arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n        for (j = 0; j < arr.length; j++) {\r\n\r\n          if (arr[j] > baseOut - 1) {\r\n            if (arr[j + 1] == null) arr[j + 1] = 0;\r\n            arr[j + 1] += arr[j] / baseOut | 0;\r\n            arr[j] %= baseOut;\r\n          }\r\n        }\r\n      }\r\n\r\n      return arr.reverse();\r\n    }\r\n\r\n    // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n    // If the caller is toString, we are converting from base 10 to baseOut.\r\n    // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n    return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n      var alphabet, d, e, k, r, x, xc, y,\r\n        i = str.indexOf('.'),\r\n        dp = DECIMAL_PLACES,\r\n        rm = ROUNDING_MODE;\r\n\r\n      // Non-integer.\r\n      if (i >= 0) {\r\n        k = POW_PRECISION;\r\n\r\n        // Unlimited precision.\r\n        POW_PRECISION = 0;\r\n        str = str.replace('.', '');\r\n        y = new BigNumber(baseIn);\r\n        x = y.pow(str.length - i);\r\n        POW_PRECISION = k;\r\n\r\n        // Convert str as if an integer, then restore the fraction part by dividing the\r\n        // result by its base raised to a power.\r\n\r\n        y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n         10, baseOut, decimal);\r\n        y.e = y.c.length;\r\n      }\r\n\r\n      // Convert the number as integer.\r\n\r\n      xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n       ? (alphabet = ALPHABET, decimal)\r\n       : (alphabet = decimal, ALPHABET));\r\n\r\n      // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n      e = k = xc.length;\r\n\r\n      // Remove trailing zeros.\r\n      for (; xc[--k] == 0; xc.pop());\r\n\r\n      // Zero?\r\n      if (!xc[0]) return alphabet.charAt(0);\r\n\r\n      // Does str represent an integer? If so, no need for the division.\r\n      if (i < 0) {\r\n        --e;\r\n      } else {\r\n        x.c = xc;\r\n        x.e = e;\r\n\r\n        // The sign is needed for correct rounding.\r\n        x.s = sign;\r\n        x = div(x, y, dp, rm, baseOut);\r\n        xc = x.c;\r\n        r = x.r;\r\n        e = x.e;\r\n      }\r\n\r\n      // xc now represents str converted to baseOut.\r\n\r\n      // The index of the rounding digit.\r\n      d = e + dp + 1;\r\n\r\n      // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n      i = xc[d];\r\n\r\n      // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n      k = baseOut / 2;\r\n      r = r || d < 0 || xc[d + 1] != null;\r\n\r\n      r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n            : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n      // If the index of the rounding digit is not greater than zero, or xc represents\r\n      // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n      // such as 0.00001.\r\n      if (d < 1 || !xc[0]) {\r\n\r\n        // 1^-dp or 0\r\n        str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n      } else {\r\n\r\n        // Truncate xc to the required number of decimal places.\r\n        xc.length = d;\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up and so on.\r\n          for (--baseOut; ++xc[--d] > baseOut;) {\r\n            xc[d] = 0;\r\n\r\n            if (!d) {\r\n              ++e;\r\n              xc = [1].concat(xc);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for (k = xc.length; !xc[--k];);\r\n\r\n        // E.g. [4, 11, 15] becomes 4bf.\r\n        for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n        // Add leading zeros, decimal point and trailing zeros as required.\r\n        str = toFixedPoint(str, e, alphabet.charAt(0));\r\n      }\r\n\r\n      // The caller will add the sign.\r\n      return str;\r\n    };\r\n  })();\r\n\r\n\r\n  // Perform division in the specified base. Called by div and convertBase.\r\n  div = (function () {\r\n\r\n    // Assume non-zero x and k.\r\n    function multiply(x, k, base) {\r\n      var m, temp, xlo, xhi,\r\n        carry = 0,\r\n        i = x.length,\r\n        klo = k % SQRT_BASE,\r\n        khi = k / SQRT_BASE | 0;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        xlo = x[i] % SQRT_BASE;\r\n        xhi = x[i] / SQRT_BASE | 0;\r\n        m = khi * xlo + xhi * klo;\r\n        temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n        carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n        x[i] = temp % base;\r\n      }\r\n\r\n      if (carry) x = [carry].concat(x);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, cmp;\r\n\r\n      if (aL != bL) {\r\n        cmp = aL > bL ? 1 : -1;\r\n      } else {\r\n\r\n        for (i = cmp = 0; i < aL; i++) {\r\n\r\n          if (a[i] != b[i]) {\r\n            cmp = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return cmp;\r\n    }\r\n\r\n    function subtract(a, b, aL, base) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * base + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n    }\r\n\r\n    // x: dividend, y: divisor.\r\n    return function (x, y, dp, rm, base) {\r\n      var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n        yL, yz,\r\n        s = x.s == y.s ? 1 : -1,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      // Either NaN, Infinity or 0?\r\n      if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n        return new BigNumber(\r\n\r\n         // Return NaN if either NaN, or both Infinity or 0.\r\n         !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n          // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n          xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n       );\r\n      }\r\n\r\n      q = new BigNumber(s);\r\n      qc = q.c = [];\r\n      e = x.e - y.e;\r\n      s = dp + e + 1;\r\n\r\n      if (!base) {\r\n        base = BASE;\r\n        e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n        s = s / LOG_BASE | 0;\r\n      }\r\n\r\n      // Result exponent may be one less then the current value of e.\r\n      // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n      for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n      if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n      if (s < 0) {\r\n        qc.push(1);\r\n        more = true;\r\n      } else {\r\n        xL = xc.length;\r\n        yL = yc.length;\r\n        i = 0;\r\n        s += 2;\r\n\r\n        // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n        n = mathfloor(base / (yc[0] + 1));\r\n\r\n        // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n        // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n        if (n > 1) {\r\n          yc = multiply(yc, n, base);\r\n          xc = multiply(xc, n, base);\r\n          yL = yc.length;\r\n          xL = xc.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xc.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL; rem[remL++] = 0);\r\n        yz = yc.slice();\r\n        yz = [0].concat(yz);\r\n        yc0 = yc[0];\r\n        if (yc[1] >= base / 2) yc0++;\r\n        // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n        // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n        do {\r\n          n = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yc, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, n.\r\n\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n            // n is how many times the divisor goes into the current remainder.\r\n            n = mathfloor(rem0 / yc0);\r\n\r\n            //  Algorithm:\r\n            //  product = divisor multiplied by trial digit (n).\r\n            //  Compare product and remainder.\r\n            //  If product is greater than remainder:\r\n            //    Subtract divisor from product, decrement trial digit.\r\n            //  Subtract product from remainder.\r\n            //  If product was less than remainder at the last compare:\r\n            //    Compare new remainder and divisor.\r\n            //    If remainder is greater than divisor:\r\n            //      Subtract divisor from remainder, increment trial digit.\r\n\r\n            if (n > 1) {\r\n\r\n              // n may be > base only when base is 3.\r\n              if (n >= base) n = base - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiply(yc, n, base);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              // If product > remainder then trial digit n too high.\r\n              // n is 1 too high about 5% of the time, and is not known to have\r\n              // ever been more than 1 too high.\r\n              while (compare(prod, rem, prodL, remL) == 1) {\r\n                n--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                prodL = prod.length;\r\n                cmp = 1;\r\n              }\r\n            } else {\r\n\r\n              // n is 0 or 1, cmp is -1.\r\n              // If n is 0, there is no need to compare yc and rem again below,\r\n              // so change cmp to 1 to avoid it.\r\n              // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n              if (n == 0) {\r\n\r\n                // divisor < remainder, so n must be at least 1.\r\n                cmp = n = 1;\r\n              }\r\n\r\n              // product = divisor\r\n              prod = yc.slice();\r\n              prodL = prod.length;\r\n            }\r\n\r\n            if (prodL < remL) prod = [0].concat(prod);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL, base);\r\n            remL = rem.length;\r\n\r\n             // If product was < remainder.\r\n            if (cmp == -1) {\r\n\r\n              // Compare divisor and new remainder.\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              // Trial digit n too low.\r\n              // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n              while (compare(yc, rem, yL, remL) < 1) {\r\n                n++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                remL = rem.length;\r\n              }\r\n            }\r\n          } else if (cmp === 0) {\r\n            n++;\r\n            rem = [0];\r\n          } // else cmp === 1 and n will be 0\r\n\r\n          // Add the next digit, n, to the result array.\r\n          qc[i++] = n;\r\n\r\n          // Update the remainder.\r\n          if (rem[0]) {\r\n            rem[remL++] = xc[xi] || 0;\r\n          } else {\r\n            rem = [xc[xi]];\r\n            remL = 1;\r\n          }\r\n        } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n        more = rem[0] != null;\r\n\r\n        // Leading zero?\r\n        if (!qc[0]) qc.splice(0, 1);\r\n      }\r\n\r\n      if (base == BASE) {\r\n\r\n        // To calculate q.e, first get the number of digits of qc[0].\r\n        for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n        round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n      // Caller is convertBase.\r\n      } else {\r\n        q.e = e;\r\n        q.r = +more;\r\n      }\r\n\r\n      return q;\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n   * notation rounded to the specified decimal places or significant digits.\r\n   *\r\n   * n: a BigNumber.\r\n   * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n   * rm: the rounding mode.\r\n   * id: 1 (toExponential) or 2 (toPrecision).\r\n   */\r\n  function format(n, i, rm, id) {\r\n    var c0, e, ne, len, str;\r\n\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n\r\n    if (!n.c) return n.toString();\r\n\r\n    c0 = n.c[0];\r\n    ne = n.e;\r\n\r\n    if (i == null) {\r\n      str = coeffToString(n.c);\r\n      str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n       ? toExponential(str, ne)\r\n       : toFixedPoint(str, ne, '0');\r\n    } else {\r\n      n = round(new BigNumber(n), i, rm);\r\n\r\n      // n.e may have changed if the value was rounded up.\r\n      e = n.e;\r\n\r\n      str = coeffToString(n.c);\r\n      len = str.length;\r\n\r\n      // toPrecision returns exponential notation if the number of significant digits\r\n      // specified is less than the number of digits necessary to represent the integer\r\n      // part of the value in fixed-point notation.\r\n\r\n      // Exponential notation.\r\n      if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n        // Append zeros?\r\n        for (; len < i; str += '0', len++);\r\n        str = toExponential(str, e);\r\n\r\n      // Fixed-point notation.\r\n      } else {\r\n        i -= ne + (id === 2 && e > ne);\r\n        str = toFixedPoint(str, e, '0');\r\n\r\n        // Append zeros?\r\n        if (e + 1 > len) {\r\n          if (--i > 0) for (str += '.'; i--; str += '0');\r\n        } else {\r\n          i += e - len;\r\n          if (i > 0) {\r\n            if (e + 1 == len) str += '.';\r\n            for (; i--; str += '0');\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return n.s < 0 && c0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Handle BigNumber.max and BigNumber.min.\r\n  // If any number is NaN, return NaN.\r\n  function maxOrMin(args, n) {\r\n    var k, y,\r\n      i = 1,\r\n      x = new BigNumber(args[0]);\r\n\r\n    for (; i < args.length; i++) {\r\n      y = new BigNumber(args[i]);\r\n      if (!y.s || (k = compare(x, y)) === n || k === 0 && x.s === n) {\r\n        x = y;\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n   * Called by minus, plus and times.\r\n   */\r\n  function normalise(n, c, e) {\r\n    var i = 1,\r\n      j = c.length;\r\n\r\n     // Remove trailing zeros.\r\n    for (; !c[--j]; c.pop());\r\n\r\n    // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n    for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n    // Overflow?\r\n    if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n      // Infinity.\r\n      n.c = n.e = null;\r\n\r\n    // Underflow?\r\n    } else if (e < MIN_EXP) {\r\n\r\n      // Zero.\r\n      n.c = [n.e = 0];\r\n    } else {\r\n      n.e = e;\r\n      n.c = c;\r\n    }\r\n\r\n    return n;\r\n  }\r\n\r\n\r\n  // Handle values that fail the validity test in BigNumber.\r\n  parseNumeric = (function () {\r\n    var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n      dotAfter = /^([^.]+)\\.$/,\r\n      dotBefore = /^\\.([^.]+)$/,\r\n      isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n      whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n    return function (x, str, isNum, b) {\r\n      var base,\r\n        s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n      // No exception on ±Infinity or NaN.\r\n      if (isInfinityOrNaN.test(s)) {\r\n        x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n      } else {\r\n        if (!isNum) {\r\n\r\n          // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n          s = s.replace(basePrefix, function (m, p1, p2) {\r\n            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n            return !b || b == base ? p1 : m;\r\n          });\r\n\r\n          if (b) {\r\n            base = b;\r\n\r\n            // E.g. '1.' to '1', '.1' to '0.1'\r\n            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n          }\r\n\r\n          if (str != s) return new BigNumber(s, base);\r\n        }\r\n\r\n        // '[BigNumber Error] Not a number: {n}'\r\n        // '[BigNumber Error] Not a base {b} number: {n}'\r\n        if (BigNumber.DEBUG) {\r\n          throw Error\r\n            (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n        }\r\n\r\n        // NaN\r\n        x.s = null;\r\n      }\r\n\r\n      x.c = x.e = null;\r\n    }\r\n  })();\r\n\r\n\r\n  /*\r\n   * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n   * If r is truthy, it is known that there are more digits after the rounding digit.\r\n   */\r\n  function round(x, sd, rm, r) {\r\n    var d, i, j, k, n, ni, rd,\r\n      xc = x.c,\r\n      pows10 = POWS_TEN;\r\n\r\n    // if x is not Infinity or NaN...\r\n    if (xc) {\r\n\r\n      // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n      // ni is the index of n within x.c.\r\n      // d is the number of digits of n.\r\n      // i is the index of rd within n including leading zeros.\r\n      // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n      out: {\r\n\r\n        // Get the number of digits of the first element of xc.\r\n        for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n        i = sd - d;\r\n\r\n        // If the rounding digit is in the first element of xc...\r\n        if (i < 0) {\r\n          i += LOG_BASE;\r\n          j = sd;\r\n          n = xc[ni = 0];\r\n\r\n          // Get the rounding digit at index j of n.\r\n          rd = mathfloor(n / pows10[d - j - 1] % 10);\r\n        } else {\r\n          ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n          if (ni >= xc.length) {\r\n\r\n            if (r) {\r\n\r\n              // Needed by sqrt.\r\n              for (; xc.length <= ni; xc.push(0));\r\n              n = rd = 0;\r\n              d = 1;\r\n              i %= LOG_BASE;\r\n              j = i - LOG_BASE + 1;\r\n            } else {\r\n              break out;\r\n            }\r\n          } else {\r\n            n = k = xc[ni];\r\n\r\n            // Get the number of digits of n.\r\n            for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n            // Get the index of rd within n.\r\n            i %= LOG_BASE;\r\n\r\n            // Get the index of rd within n, adjusted for leading zeros.\r\n            // The number of leading zeros of n is given by LOG_BASE - d.\r\n            j = i - LOG_BASE + d;\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);\r\n          }\r\n        }\r\n\r\n        r = r || sd < 0 ||\r\n\r\n        // Are there any non-zero digits after the rounding digit?\r\n        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n         xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n        r = rm < 4\r\n         ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n         : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n           rm == (x.s < 0 ? 8 : 7));\r\n\r\n        if (sd < 1 || !xc[0]) {\r\n          xc.length = 0;\r\n\r\n          if (r) {\r\n\r\n            // Convert sd to decimal places.\r\n            sd -= x.e + 1;\r\n\r\n            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n            x.e = -sd || 0;\r\n          } else {\r\n\r\n            // Zero.\r\n            xc[0] = x.e = 0;\r\n          }\r\n\r\n          return x;\r\n        }\r\n\r\n        // Remove excess digits.\r\n        if (i == 0) {\r\n          xc.length = ni;\r\n          k = 1;\r\n          ni--;\r\n        } else {\r\n          xc.length = ni + 1;\r\n          k = pows10[LOG_BASE - i];\r\n\r\n          // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n          // j > 0 means i > number of leading zeros of n.\r\n          xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n        }\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          for (; ;) {\r\n\r\n            // If the digit to be rounded up is in the first element of xc...\r\n            if (ni == 0) {\r\n\r\n              // i will be the length of xc[0] before k is added.\r\n              for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n              j = xc[0] += k;\r\n              for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n              // if i != k the length has increased.\r\n              if (i != k) {\r\n                x.e++;\r\n                if (xc[0] == BASE) xc[0] = 1;\r\n              }\r\n\r\n              break;\r\n            } else {\r\n              xc[ni] += k;\r\n              if (xc[ni] != BASE) break;\r\n              xc[ni--] = 0;\r\n              k = 1;\r\n            }\r\n          }\r\n        }\r\n\r\n        // Remove trailing zeros.\r\n        for (i = xc.length; xc[--i] === 0; xc.pop());\r\n      }\r\n\r\n      // Overflow? Infinity.\r\n      if (x.e > MAX_EXP) {\r\n        x.c = x.e = null;\r\n\r\n      // Underflow? Zero.\r\n      } else if (x.e < MIN_EXP) {\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function valueOf(n) {\r\n    var str,\r\n      e = n.e;\r\n\r\n    if (e === null) return n.toString();\r\n\r\n    str = coeffToString(n.c);\r\n\r\n    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n      ? toExponential(str, e)\r\n      : toFixedPoint(str, e, '0');\r\n\r\n    return n.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new BigNumber(this);\r\n    if (x.s < 0) x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   *   0 if they have the same value,\r\n   *   or null if the value of either is NaN.\r\n   */\r\n  P.comparedTo = function (y, b) {\r\n    return compare(this, new BigNumber(y, b));\r\n  };\r\n\r\n\r\n  /*\r\n   * If dp is undefined or null or true or false, return the number of decimal places of the\r\n   * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   *\r\n   * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.decimalPlaces = P.dp = function (dp, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), dp + x.e + 1, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last number.\r\n    if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n    if (n < 0) n = 0;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n   * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.dividedBy = P.div = function (y, b) {\r\n    return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n   * BigNumber by the value of BigNumber(y, b).\r\n   */\r\n  P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n    return div(this, new BigNumber(y, b), 0, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n   *\r\n   * If m is present, return the result modulo m.\r\n   * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n   *\r\n   * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n   * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n   *\r\n   * n {number|string|BigNumber} The exponent. An integer.\r\n   * [m] {number|string|BigNumber} The modulus.\r\n   *\r\n   * '[BigNumber Error] Exponent not an integer: {n}'\r\n   */\r\n  P.exponentiatedBy = P.pow = function (n, m) {\r\n    var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n      x = this;\r\n\r\n    n = new BigNumber(n);\r\n\r\n    // Allow NaN and ±Infinity, but not other non-integers.\r\n    if (n.c && !n.isInteger()) {\r\n      throw Error\r\n        (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n    }\r\n\r\n    if (m != null) m = new BigNumber(m);\r\n\r\n    // Exponent of MAX_SAFE_INTEGER is 15.\r\n    nIsBig = n.e > 14;\r\n\r\n    // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n    if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n      // The sign of the result of pow when x is negative depends on the evenness of n.\r\n      // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n      y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));\r\n      return m ? y.mod(m) : y;\r\n    }\r\n\r\n    nIsNeg = n.s < 0;\r\n\r\n    if (m) {\r\n\r\n      // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n      if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n      isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n      if (isModExp) x = x.mod(m);\r\n\r\n    // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n    // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n    } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n      // [1, 240000000]\r\n      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n      // [80000000000000]  [99999750000000]\r\n      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n      // If x is negative and n is odd, k = -0, else k = 0.\r\n      k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n      // If x >= 1, k = ±Infinity.\r\n      if (x.e > -1) k = 1 / k;\r\n\r\n      // If n is negative return ±0, else return ±Infinity.\r\n      return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n    } else if (POW_PRECISION) {\r\n\r\n      // Truncating each coefficient array to a length of k after each multiplication\r\n      // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n      // i.e. there will be a minimum of 28 guard digits retained.\r\n      k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n    }\r\n\r\n    if (nIsBig) {\r\n      half = new BigNumber(0.5);\r\n      if (nIsNeg) n.s = 1;\r\n      nIsOdd = isOdd(n);\r\n    } else {\r\n      i = Math.abs(+valueOf(n));\r\n      nIsOdd = i % 2;\r\n    }\r\n\r\n    y = new BigNumber(ONE);\r\n\r\n    // Performs 54 loop iterations for n of 9007199254740991.\r\n    for (; ;) {\r\n\r\n      if (nIsOdd) {\r\n        y = y.times(x);\r\n        if (!y.c) break;\r\n\r\n        if (k) {\r\n          if (y.c.length > k) y.c.length = k;\r\n        } else if (isModExp) {\r\n          y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (i) {\r\n        i = mathfloor(i / 2);\r\n        if (i === 0) break;\r\n        nIsOdd = i % 2;\r\n      } else {\r\n        n = n.times(half);\r\n        round(n, n.e + 1, 1);\r\n\r\n        if (n.e > 14) {\r\n          nIsOdd = isOdd(n);\r\n        } else {\r\n          i = +valueOf(n);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        }\r\n      }\r\n\r\n      x = x.times(x);\r\n\r\n      if (k) {\r\n        if (x.c && x.c.length > k) x.c.length = k;\r\n      } else if (isModExp) {\r\n        x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n      }\r\n    }\r\n\r\n    if (isModExp) return y;\r\n    if (nIsNeg) y = ONE.div(y);\r\n\r\n    return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n   * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n   */\r\n  P.integerValue = function (rm) {\r\n    var n = new BigNumber(this);\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n    return round(n, n.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isEqualTo = P.eq = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n   */\r\n  P.isFinite = function () {\r\n    return !!this.c;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isGreaterThan = P.gt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n   */\r\n  P.isInteger = function () {\r\n    return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isLessThan = P.lt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n   */\r\n  P.isNaN = function () {\r\n    return !this.s;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is negative, otherwise return false.\r\n   */\r\n  P.isNegative = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is positive, otherwise return false.\r\n   */\r\n  P.isPositive = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n   */\r\n  P.isZero = function () {\r\n    return !!this.c && this.c[0] == 0;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.minus = function (y, b) {\r\n    var i, j, t, xLTy,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.plus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Either Infinity?\r\n      if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n      // Either zero?\r\n      if (!xc[0] || !yc[0]) {\r\n\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n         // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n         ROUNDING_MODE == 3 ? -0 : 0);\r\n      }\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Determine which is the bigger number.\r\n    if (a = xe - ye) {\r\n\r\n      if (xLTy = a < 0) {\r\n        a = -a;\r\n        t = xc;\r\n      } else {\r\n        ye = xe;\r\n        t = yc;\r\n      }\r\n\r\n      t.reverse();\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      for (b = a; b--; t.push(0));\r\n      t.reverse();\r\n    } else {\r\n\r\n      // Exponents equal. Check digit by digit.\r\n      j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n      for (a = b = 0; b < j; b++) {\r\n\r\n        if (xc[b] != yc[b]) {\r\n          xLTy = xc[b] < yc[b];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // x < y? Point xc to the array of the bigger number.\r\n    if (xLTy) {\r\n      t = xc;\r\n      xc = yc;\r\n      yc = t;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    b = (j = yc.length) - (i = xc.length);\r\n\r\n    // Append zeros to xc if shorter.\r\n    // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n    if (b > 0) for (; b--; xc[i++] = 0);\r\n    b = BASE - 1;\r\n\r\n    // Subtract yc from xc.\r\n    for (; j > a;) {\r\n\r\n      if (xc[--j] < yc[j]) {\r\n        for (i = j; i && !xc[--i]; xc[i] = b);\r\n        --xc[i];\r\n        xc[j] += BASE;\r\n      }\r\n\r\n      xc[j] -= yc[j];\r\n    }\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n    // Zero?\r\n    if (!xc[0]) {\r\n\r\n      // Following IEEE 754 (2008) 6.3,\r\n      // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n      y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n      y.c = [y.e = 0];\r\n      return y;\r\n    }\r\n\r\n    // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n    // for finite x and y.\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n   * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n   */\r\n  P.modulo = P.mod = function (y, b) {\r\n    var q, s,\r\n      x = this;\r\n\r\n    y = new BigNumber(y, b);\r\n\r\n    // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n    if (!x.c || !y.s || y.c && !y.c[0]) {\r\n      return new BigNumber(NaN);\r\n\r\n    // Return x if y is Infinity or x is zero.\r\n    } else if (!y.c || x.c && !x.c[0]) {\r\n      return new BigNumber(x);\r\n    }\r\n\r\n    if (MODULO_MODE == 9) {\r\n\r\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n      // r = x - qy    where  0 <= r < abs(y)\r\n      s = y.s;\r\n      y.s = 1;\r\n      q = div(x, y, 0, 3);\r\n      y.s = s;\r\n      q.s *= s;\r\n    } else {\r\n      q = div(x, y, 0, MODULO_MODE);\r\n    }\r\n\r\n    y = x.minus(q.times(y));\r\n\r\n    // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n    if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n   * of BigNumber(y, b).\r\n   */\r\n  P.multipliedBy = P.times = function (y, b) {\r\n    var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n      base, sqrtBase,\r\n      x = this,\r\n      xc = x.c,\r\n      yc = (y = new BigNumber(y, b)).c;\r\n\r\n    // Either NaN, ±Infinity or ±0?\r\n    if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n      // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n      if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n        y.c = y.e = y.s = null;\r\n      } else {\r\n        y.s *= x.s;\r\n\r\n        // Return ±Infinity if either is ±Infinity.\r\n        if (!xc || !yc) {\r\n          y.c = y.e = null;\r\n\r\n        // Return ±0 if either is ±0.\r\n        } else {\r\n          y.c = [0];\r\n          y.e = 0;\r\n        }\r\n      }\r\n\r\n      return y;\r\n    }\r\n\r\n    e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n    y.s *= x.s;\r\n    xcL = xc.length;\r\n    ycL = yc.length;\r\n\r\n    // Ensure xc points to longer array and xcL to its length.\r\n    if (xcL < ycL) {\r\n      zc = xc;\r\n      xc = yc;\r\n      yc = zc;\r\n      i = xcL;\r\n      xcL = ycL;\r\n      ycL = i;\r\n    }\r\n\r\n    // Initialise the result array with zeros.\r\n    for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n    base = BASE;\r\n    sqrtBase = SQRT_BASE;\r\n\r\n    for (i = ycL; --i >= 0;) {\r\n      c = 0;\r\n      ylo = yc[i] % sqrtBase;\r\n      yhi = yc[i] / sqrtBase | 0;\r\n\r\n      for (k = xcL, j = i + k; j > i;) {\r\n        xlo = xc[--k] % sqrtBase;\r\n        xhi = xc[k] / sqrtBase | 0;\r\n        m = yhi * xlo + xhi * ylo;\r\n        xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n        c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n        zc[j--] = xlo % base;\r\n      }\r\n\r\n      zc[j] = c;\r\n    }\r\n\r\n    if (c) {\r\n      ++e;\r\n    } else {\r\n      zc.splice(0, 1);\r\n    }\r\n\r\n    return normalise(y, zc, e);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n   * i.e. multiplied by -1.\r\n   */\r\n  P.negated = function () {\r\n    var x = new BigNumber(this);\r\n    x.s = -x.s || null;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.plus = function (y, b) {\r\n    var t,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n     if (a != b) {\r\n      y.s = -b;\r\n      return x.minus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Return ±Infinity if either ±Infinity.\r\n      if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n      // Either zero?\r\n      // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n      if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n    if (a = xe - ye) {\r\n      if (a > 0) {\r\n        ye = xe;\r\n        t = yc;\r\n      } else {\r\n        a = -a;\r\n        t = xc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (; a--; t.push(0));\r\n      t.reverse();\r\n    }\r\n\r\n    a = xc.length;\r\n    b = yc.length;\r\n\r\n    // Point xc to the longer array, and b to the shorter length.\r\n    if (a - b < 0) {\r\n      t = yc;\r\n      yc = xc;\r\n      xc = t;\r\n      b = a;\r\n    }\r\n\r\n    // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n    for (a = 0; b;) {\r\n      a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n      xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n    }\r\n\r\n    if (a) {\r\n      xc = [a].concat(xc);\r\n      ++ye;\r\n    }\r\n\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    // ye = MAX_EXP + 1 possible\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   * If sd is undefined or null or true or false, return the number of significant digits of\r\n   * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   * If sd is true include integer-part trailing zeros in the count.\r\n   *\r\n   * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n   *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.precision = P.sd = function (sd, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (sd != null && sd !== !!sd) {\r\n      intCheck(sd, 1, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), sd, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    v = c.length - 1;\r\n    n = v * LOG_BASE + 1;\r\n\r\n    if (v = c[v]) {\r\n\r\n      // Subtract the number of trailing zeros of the last element.\r\n      for (; v % 10 == 0; v /= 10, n--);\r\n\r\n      // Add the number of digits of the first element.\r\n      for (v = c[0]; v >= 10; v /= 10, n++);\r\n    }\r\n\r\n    if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n   * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n   *\r\n   * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n   */\r\n  P.shiftedBy = function (k) {\r\n    intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n    return this.times('1e' + k);\r\n  };\r\n\r\n\r\n  /*\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N) =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I) =  I\r\n   *  sqrt(0) =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n   * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var m, n, r, rep, t,\r\n      x = this,\r\n      c = x.c,\r\n      s = x.s,\r\n      e = x.e,\r\n      dp = DECIMAL_PLACES + 4,\r\n      half = new BigNumber('0.5');\r\n\r\n    // Negative/NaN/Infinity/zero?\r\n    if (s !== 1 || !c || !c[0]) {\r\n      return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n    }\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+valueOf(x));\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = coeffToString(c);\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(+n);\r\n      e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new BigNumber(n);\r\n    } else {\r\n      r = new BigNumber(s + '');\r\n    }\r\n\r\n    // Check for zero.\r\n    // r could be zero if MIN_EXP is changed after the this value was created.\r\n    // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n    // coeffToString to throw.\r\n    if (r.c[0]) {\r\n      e = r.e;\r\n      s = e + dp;\r\n      if (s < 3) s = 0;\r\n\r\n      // Newton-Raphson iteration.\r\n      for (; ;) {\r\n        t = r;\r\n        r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n        if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n          // The exponent of r may here be one less than the final result exponent,\r\n          // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n          // are indexed correctly.\r\n          if (r.e < e) --s;\r\n          n = n.slice(s - 3, s + 1);\r\n\r\n          // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n          // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n          // iteration.\r\n          if (n == '9999' || !rep && n == '4999') {\r\n\r\n            // On the first iteration only, check to see if rounding up gives the\r\n            // exact result as the nines may infinitely repeat.\r\n            if (!rep) {\r\n              round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n              if (t.times(t).eq(x)) {\r\n                r = t;\r\n                break;\r\n              }\r\n            }\r\n\r\n            dp += 4;\r\n            s += 4;\r\n            rep = 1;\r\n          } else {\r\n\r\n            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n            // result. If not, then there are further digits and m will be truthy.\r\n            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n              // Truncate to the first rounding digit.\r\n              round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n              m = !r.times(r).eq(x);\r\n            }\r\n\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in exponential notation and\r\n   * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp++;\r\n    }\r\n    return format(this, dp, rm, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n   * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n   * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp = dp + this.e + 1;\r\n    }\r\n    return format(this, dp, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n   * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n   * of the format or FORMAT object (see BigNumber.set).\r\n   *\r\n   * The formatting object may contain some or all of the properties shown below.\r\n   *\r\n   * FORMAT = {\r\n   *   prefix: '',\r\n   *   groupSize: 3,\r\n   *   secondaryGroupSize: 0,\r\n   *   groupSeparator: ',',\r\n   *   decimalSeparator: '.',\r\n   *   fractionGroupSize: 0,\r\n   *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n   *   suffix: ''\r\n   * };\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   * [format] {object} Formatting options. See FORMAT pbject above.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   * '[BigNumber Error] Argument not an object: {format}'\r\n   */\r\n  P.toFormat = function (dp, rm, format) {\r\n    var str,\r\n      x = this;\r\n\r\n    if (format == null) {\r\n      if (dp != null && rm && typeof rm == 'object') {\r\n        format = rm;\r\n        rm = null;\r\n      } else if (dp && typeof dp == 'object') {\r\n        format = dp;\r\n        dp = rm = null;\r\n      } else {\r\n        format = FORMAT;\r\n      }\r\n    } else if (typeof format != 'object') {\r\n      throw Error\r\n        (bignumberError + 'Argument not an object: ' + format);\r\n    }\r\n\r\n    str = x.toFixed(dp, rm);\r\n\r\n    if (x.c) {\r\n      var i,\r\n        arr = str.split('.'),\r\n        g1 = +format.groupSize,\r\n        g2 = +format.secondaryGroupSize,\r\n        groupSeparator = format.groupSeparator || '',\r\n        intPart = arr[0],\r\n        fractionPart = arr[1],\r\n        isNeg = x.s < 0,\r\n        intDigits = isNeg ? intPart.slice(1) : intPart,\r\n        len = intDigits.length;\r\n\r\n      if (g2) {\r\n        i = g1;\r\n        g1 = g2;\r\n        g2 = i;\r\n        len -= i;\r\n      }\r\n\r\n      if (g1 > 0 && len > 0) {\r\n        i = len % g1 || g1;\r\n        intPart = intDigits.substr(0, i);\r\n        for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n        if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n        if (isNeg) intPart = '-' + intPart;\r\n      }\r\n\r\n      str = fractionPart\r\n       ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n        ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n         '$&' + (format.fractionGroupSeparator || ''))\r\n        : fractionPart)\r\n       : intPart;\r\n    }\r\n\r\n    return (format.prefix || '') + str + (format.suffix || '');\r\n  };\r\n\r\n\r\n  /*\r\n   * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n   * fraction with an integer numerator and an integer denominator.\r\n   * The denominator will be a positive non-zero value less than or equal to the specified\r\n   * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n   * the lowest value necessary to represent the number exactly.\r\n   *\r\n   * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n   *\r\n   * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n   */\r\n  P.toFraction = function (md) {\r\n    var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n      x = this,\r\n      xc = x.c;\r\n\r\n    if (md != null) {\r\n      n = new BigNumber(md);\r\n\r\n      // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n      if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n        throw Error\r\n          (bignumberError + 'Argument ' +\r\n            (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n      }\r\n    }\r\n\r\n    if (!xc) return new BigNumber(x);\r\n\r\n    d = new BigNumber(ONE);\r\n    n1 = d0 = new BigNumber(ONE);\r\n    d1 = n0 = new BigNumber(ONE);\r\n    s = coeffToString(xc);\r\n\r\n    // Determine initial denominator.\r\n    // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n    e = d.e = s.length - x.e - 1;\r\n    d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n    md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n    exp = MAX_EXP;\r\n    MAX_EXP = 1 / 0;\r\n    n = new BigNumber(s);\r\n\r\n    // n0 = d1 = 0\r\n    n0.c[0] = 0;\r\n\r\n    for (; ;)  {\r\n      q = div(n, d, 0, 1);\r\n      d2 = d0.plus(q.times(d1));\r\n      if (d2.comparedTo(md) == 1) break;\r\n      d0 = d1;\r\n      d1 = d2;\r\n      n1 = n0.plus(q.times(d2 = n1));\r\n      n0 = d2;\r\n      d = n.minus(q.times(d2 = d));\r\n      n = d2;\r\n    }\r\n\r\n    d2 = div(md.minus(d0), d1, 0, 1);\r\n    n0 = n0.plus(d2.times(n1));\r\n    d0 = d0.plus(d2.times(d1));\r\n    n0.s = n1.s = x.s;\r\n    e = e * 2;\r\n\r\n    // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n    r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n        div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n    MAX_EXP = exp;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this BigNumber converted to a number primitive.\r\n   */\r\n  P.toNumber = function () {\r\n    return +valueOf(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n   * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n   * necessary to represent the integer part of the value in fixed-point notation, then use\r\n   * exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    if (sd != null) intCheck(sd, 1, MAX);\r\n    return format(this, sd, rm, 2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n   * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n   * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n   * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n   * TO_EXP_NEG, return exponential notation.\r\n   *\r\n   * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n   *\r\n   * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n   */\r\n  P.toString = function (b) {\r\n    var str,\r\n      n = this,\r\n      s = n.s,\r\n      e = n.e;\r\n\r\n    // Infinity or NaN?\r\n    if (e === null) {\r\n      if (s) {\r\n        str = 'Infinity';\r\n        if (s < 0) str = '-' + str;\r\n      } else {\r\n        str = 'NaN';\r\n      }\r\n    } else {\r\n      if (b == null) {\r\n        str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n         ? toExponential(coeffToString(n.c), e)\r\n         : toFixedPoint(coeffToString(n.c), e, '0');\r\n      } else if (b === 10 && alphabetHasNormalDecimalDigits) {\r\n        n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n        str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n      } else {\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n        str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n      }\r\n\r\n      if (s < 0 && n.c[0]) str = '-' + str;\r\n    }\r\n\r\n    return str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return as toString, but do not accept a base argument, and include the minus sign for\r\n   * negative zero.\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    return valueOf(this);\r\n  };\r\n\r\n\r\n  P._isBigNumber = true;\r\n\r\n  P[Symbol.toStringTag] = 'BigNumber';\r\n\r\n  // Node.js v10.12.0+\r\n  P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n\r\n  if (configObject != null) BigNumber.set(configObject);\r\n\r\n  return BigNumber;\r\n}\r\n\r\n\r\n// PRIVATE HELPER FUNCTIONS\r\n\r\n// These functions don't need access to variables,\r\n// e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\nfunction bitFloor(n) {\r\n  var i = n | 0;\r\n  return n > 0 || n === i ? i : i - 1;\r\n}\r\n\r\n\r\n// Return a coefficient array as a string of base 10 digits.\r\nfunction coeffToString(a) {\r\n  var s, z,\r\n    i = 1,\r\n    j = a.length,\r\n    r = a[0] + '';\r\n\r\n  for (; i < j;) {\r\n    s = a[i++] + '';\r\n    z = LOG_BASE - s.length;\r\n    for (; z--; s = '0' + s);\r\n    r += s;\r\n  }\r\n\r\n  // Determine trailing zeros.\r\n  for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n  return r.slice(0, j + 1 || 1);\r\n}\r\n\r\n\r\n// Compare the value of BigNumbers x and y.\r\nfunction compare(x, y) {\r\n  var a, b,\r\n    xc = x.c,\r\n    yc = y.c,\r\n    i = x.s,\r\n    j = y.s,\r\n    k = x.e,\r\n    l = y.e;\r\n\r\n  // Either NaN?\r\n  if (!i || !j) return null;\r\n\r\n  a = xc && !xc[0];\r\n  b = yc && !yc[0];\r\n\r\n  // Either zero?\r\n  if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n  // Signs differ?\r\n  if (i != j) return i;\r\n\r\n  a = i < 0;\r\n  b = k == l;\r\n\r\n  // Either Infinity?\r\n  if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n  // Compare exponents.\r\n  if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n  j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n  // Compare lengths.\r\n  return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n}\r\n\r\n\r\n/*\r\n * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n */\r\nfunction intCheck(n, min, max, name) {\r\n  if (n < min || n > max || n !== mathfloor(n)) {\r\n    throw Error\r\n     (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n       ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n       : ' not a primitive number: ') + String(n));\r\n  }\r\n}\r\n\r\n\r\n// Assumes finite n.\r\nfunction isOdd(n) {\r\n  var k = n.c.length - 1;\r\n  return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n}\r\n\r\n\r\nfunction toExponential(str, e) {\r\n  return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n   (e < 0 ? 'e' : 'e+') + e;\r\n}\r\n\r\n\r\nfunction toFixedPoint(str, e, z) {\r\n  var len, zs;\r\n\r\n  // Negative exponent?\r\n  if (e < 0) {\r\n\r\n    // Prepend zeros.\r\n    for (zs = z + '.'; ++e; zs += z);\r\n    str = zs + str;\r\n\r\n  // Positive exponent\r\n  } else {\r\n    len = str.length;\r\n\r\n    // Append zeros.\r\n    if (++e > len) {\r\n      for (zs = z, e -= len; --e; zs += z);\r\n      str += zs;\r\n    } else if (e < len) {\r\n      str = str.slice(0, e) + '.' + str.slice(e);\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n\r\n// EXPORT\r\n\r\n\r\nexport var BigNumber = clone();\r\n\r\nexport default BigNumber;\r\n","import { Layout } from '@solana/buffer-layout';\nimport BigNumber from 'bignumber.js';\nimport { encodeDecode } from './base';\nimport { u128 } from './bigint';\n\nexport const WAD = new BigNumber('1e+18');\n\nexport const decimal = (property?: string): Layout<BigNumber> => {\n    const layout = u128(property);\n    const { encode, decode } = encodeDecode(layout);\n\n    const decimalLayout = layout as Layout<unknown> as Layout<BigNumber>;\n\n    decimalLayout.decode = (buffer: Buffer, offset: number) => {\n        const src = decode(buffer, offset).toString();\n        return new BigNumber(src).div(WAD);\n    };\n\n    decimalLayout.encode = (decimal: BigNumber, buffer: Buffer, offset: number) => {\n        const src = BigInt(decimal.times(WAD).integerValue().toString());\n        return encode(src, buffer, offset);\n    };\n\n    return decimalLayout;\n};\n","import { Layout, u8 } from '@solana/buffer-layout';\nimport { encodeDecode } from './base';\n\nexport const bool = (property?: string): Layout<boolean> => {\n    const layout = u8(property);\n    const { encode, decode } = encodeDecode(layout);\n\n    const boolLayout = layout as Layout<unknown> as Layout<boolean>;\n\n    boolLayout.decode = (buffer: Buffer, offset: number) => {\n        const src = decode(buffer, offset);\n        return !!src;\n    };\n\n    boolLayout.encode = (bool: boolean, buffer: Buffer, offset: number) => {\n        const src = Number(bool);\n        return encode(src, buffer, offset);\n    };\n\n    return boolLayout;\n};\n","import { blob, Layout } from '@solana/buffer-layout';\nimport { PublicKey } from '@solana/web3.js';\nimport { encodeDecode } from './base';\n\nexport const publicKey = (property?: string): Layout<PublicKey> => {\n    const layout = blob(32, property);\n    const { encode, decode } = encodeDecode(layout);\n\n    const publicKeyLayout = layout as Layout<unknown> as Layout<PublicKey>;\n\n    publicKeyLayout.decode = (buffer: Buffer, offset: number) => {\n        const src = decode(buffer, offset);\n        return new PublicKey(src);\n    };\n\n    publicKeyLayout.encode = (publicKey: PublicKey, buffer: Buffer, offset: number) => {\n        const src = publicKey.toBuffer();\n        return encode(src, buffer, offset);\n    };\n\n    return publicKeyLayout;\n};\n","export enum AccountType {\n    Uninitialized,\n    Mint,\n    Account,\n}\nexport const ACCOUNT_TYPE_SIZE = 1;\n","import { struct, u8 } from '@solana/buffer-layout';\nimport { bool, publicKey } from '@solana/buffer-layout-utils';\nimport type { AccountInfo, Commitment, Connection, PublicKey } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenAccountNotFoundError, TokenInvalidAccountOwnerError, TokenInvalidAccountSizeError } from '../errors.js';\n\n/** Information about a multisig */\nexport interface Multisig {\n    /** Address of the multisig */\n    address: PublicKey;\n    /** Number of signers required */\n    m: number;\n    /** Number of possible signers, corresponds to the number of `signers` that are valid */\n    n: number;\n    /** Is this mint initialized */\n    isInitialized: boolean;\n    /** Full set of signers, of which `n` are valid */\n    signer1: PublicKey;\n    signer2: PublicKey;\n    signer3: PublicKey;\n    signer4: PublicKey;\n    signer5: PublicKey;\n    signer6: PublicKey;\n    signer7: PublicKey;\n    signer8: PublicKey;\n    signer9: PublicKey;\n    signer10: PublicKey;\n    signer11: PublicKey;\n}\n\n/** Multisig as stored by the program */\nexport type RawMultisig = Omit<Multisig, 'address'>;\n\n/** Buffer layout for de/serializing a multisig */\nexport const MultisigLayout = struct<RawMultisig>([\n    u8('m'),\n    u8('n'),\n    bool('isInitialized'),\n    publicKey('signer1'),\n    publicKey('signer2'),\n    publicKey('signer3'),\n    publicKey('signer4'),\n    publicKey('signer5'),\n    publicKey('signer6'),\n    publicKey('signer7'),\n    publicKey('signer8'),\n    publicKey('signer9'),\n    publicKey('signer10'),\n    publicKey('signer11'),\n]);\n\n/** Byte length of a multisig */\nexport const MULTISIG_SIZE = MultisigLayout.span;\n\n/**\n * Retrieve information about a multisig\n *\n * @param connection Connection to use\n * @param address    Multisig account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Multisig information\n */\nexport async function getMultisig(\n    connection: Connection,\n    address: PublicKey,\n    commitment?: Commitment,\n    programId = TOKEN_PROGRAM_ID,\n): Promise<Multisig> {\n    const info = await connection.getAccountInfo(address, commitment);\n    return unpackMultisig(address, info, programId);\n}\n\n/**\n * Unpack a multisig\n *\n * @param address   Multisig account\n * @param info      Multisig account data\n * @param programId SPL Token program account\n *\n * @return Unpacked multisig\n */\nexport function unpackMultisig(\n    address: PublicKey,\n    info: AccountInfo<Buffer> | null,\n    programId = TOKEN_PROGRAM_ID,\n): Multisig {\n    if (!info) throw new TokenAccountNotFoundError();\n    if (!info.owner.equals(programId)) throw new TokenInvalidAccountOwnerError();\n    if (info.data.length != MULTISIG_SIZE) throw new TokenInvalidAccountSizeError();\n\n    const multisig = MultisigLayout.decode(info.data);\n\n    return { address, ...multisig };\n}\n\n/** Get the minimum lamport balance for a multisig to be rent exempt\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptMultisig(\n    connection: Connection,\n    commitment?: Commitment,\n): Promise<number> {\n    return await connection.getMinimumBalanceForRentExemption(MULTISIG_SIZE, commitment);\n}\n","import { struct, u32, u8 } from '@solana/buffer-layout';\nimport { publicKey, u64 } from '@solana/buffer-layout-utils';\nimport type { AccountInfo, Commitment, Connection, PublicKey } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenAccountNotFoundError,\n    TokenInvalidAccountError,\n    TokenInvalidAccountOwnerError,\n    TokenInvalidAccountSizeError,\n} from '../errors.js';\nimport { ACCOUNT_TYPE_SIZE, AccountType } from '../extensions/accountType.js';\nimport type { ExtensionType } from '../extensions/extensionType.js';\nimport { getAccountLen } from '../extensions/extensionType.js';\nimport { MULTISIG_SIZE } from './multisig.js';\n\n/** Information about a token account */\nexport interface Account {\n    /** Address of the account */\n    address: PublicKey;\n    /** Mint associated with the account */\n    mint: PublicKey;\n    /** Owner of the account */\n    owner: PublicKey;\n    /** Number of tokens the account holds */\n    amount: bigint;\n    /** Authority that can transfer tokens from the account */\n    delegate: PublicKey | null;\n    /** Number of tokens the delegate is authorized to transfer */\n    delegatedAmount: bigint;\n    /** True if the account is initialized */\n    isInitialized: boolean;\n    /** True if the account is frozen */\n    isFrozen: boolean;\n    /** True if the account is a native token account */\n    isNative: boolean;\n    /**\n     * If the account is a native token account, it must be rent-exempt. The rent-exempt reserve is the amount that must\n     * remain in the balance until the account is closed.\n     */\n    rentExemptReserve: bigint | null;\n    /** Optional authority to close the account */\n    closeAuthority: PublicKey | null;\n    tlvData: Buffer;\n}\n\n/** Token account state as stored by the program */\nexport enum AccountState {\n    Uninitialized = 0,\n    Initialized = 1,\n    Frozen = 2,\n}\n\n/** Token account as stored by the program */\nexport interface RawAccount {\n    mint: PublicKey;\n    owner: PublicKey;\n    amount: bigint;\n    delegateOption: 1 | 0;\n    delegate: PublicKey;\n    state: AccountState;\n    isNativeOption: 1 | 0;\n    isNative: bigint;\n    delegatedAmount: bigint;\n    closeAuthorityOption: 1 | 0;\n    closeAuthority: PublicKey;\n}\n\n/** Buffer layout for de/serializing a token account */\nexport const AccountLayout = struct<RawAccount>([\n    publicKey('mint'),\n    publicKey('owner'),\n    u64('amount'),\n    u32('delegateOption'),\n    publicKey('delegate'),\n    u8('state'),\n    u32('isNativeOption'),\n    u64('isNative'),\n    u64('delegatedAmount'),\n    u32('closeAuthorityOption'),\n    publicKey('closeAuthority'),\n]);\n\n/** Byte length of a token account */\nexport const ACCOUNT_SIZE = AccountLayout.span;\n\n/**\n * Retrieve information about a token account\n *\n * @param connection Connection to use\n * @param address    Token account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Token account information\n */\nexport async function getAccount(\n    connection: Connection,\n    address: PublicKey,\n    commitment?: Commitment,\n    programId = TOKEN_PROGRAM_ID,\n): Promise<Account> {\n    const info = await connection.getAccountInfo(address, commitment);\n    return unpackAccount(address, info, programId);\n}\n\n/**\n * Retrieve information about multiple token accounts in a single RPC call\n *\n * @param connection Connection to use\n * @param addresses  Token accounts\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Token account information\n */\nexport async function getMultipleAccounts(\n    connection: Connection,\n    addresses: PublicKey[],\n    commitment?: Commitment,\n    programId = TOKEN_PROGRAM_ID,\n): Promise<Account[]> {\n    const infos = await connection.getMultipleAccountsInfo(addresses, commitment);\n    return addresses.map((address, i) => unpackAccount(address, infos[i], programId));\n}\n\n/** Get the minimum lamport balance for a base token account to be rent exempt\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptAccount(\n    connection: Connection,\n    commitment?: Commitment,\n): Promise<number> {\n    return await getMinimumBalanceForRentExemptAccountWithExtensions(connection, [], commitment);\n}\n\n/** Get the minimum lamport balance for a rent-exempt token account with extensions\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptAccountWithExtensions(\n    connection: Connection,\n    extensions: ExtensionType[],\n    commitment?: Commitment,\n): Promise<number> {\n    const accountLen = getAccountLen(extensions);\n    return await connection.getMinimumBalanceForRentExemption(accountLen, commitment);\n}\n\n/**\n * Unpack a token account\n *\n * @param address   Token account\n * @param info      Token account data\n * @param programId SPL Token program account\n *\n * @return Unpacked token account\n */\nexport function unpackAccount(\n    address: PublicKey,\n    info: AccountInfo<Buffer> | null,\n    programId = TOKEN_PROGRAM_ID,\n): Account {\n    if (!info) throw new TokenAccountNotFoundError();\n    if (!info.owner.equals(programId)) throw new TokenInvalidAccountOwnerError();\n    if (info.data.length < ACCOUNT_SIZE) throw new TokenInvalidAccountSizeError();\n\n    const rawAccount = AccountLayout.decode(info.data.slice(0, ACCOUNT_SIZE));\n    let tlvData = Buffer.alloc(0);\n    if (info.data.length > ACCOUNT_SIZE) {\n        if (info.data.length === MULTISIG_SIZE) throw new TokenInvalidAccountSizeError();\n        if (info.data[ACCOUNT_SIZE] != AccountType.Account) throw new TokenInvalidAccountError();\n        tlvData = info.data.slice(ACCOUNT_SIZE + ACCOUNT_TYPE_SIZE);\n    }\n\n    return {\n        address,\n        mint: rawAccount.mint,\n        owner: rawAccount.owner,\n        amount: rawAccount.amount,\n        delegate: rawAccount.delegateOption ? rawAccount.delegate : null,\n        delegatedAmount: rawAccount.delegatedAmount,\n        isInitialized: rawAccount.state !== AccountState.Uninitialized,\n        isFrozen: rawAccount.state === AccountState.Frozen,\n        isNative: !!rawAccount.isNativeOption,\n        rentExemptReserve: rawAccount.isNativeOption ? rawAccount.isNative : null,\n        closeAuthority: rawAccount.closeAuthorityOption ? rawAccount.closeAuthority : null,\n        tlvData,\n    };\n}\n","import { struct, u32, u8 } from '@solana/buffer-layout';\nimport { bool, publicKey, u64 } from '@solana/buffer-layout-utils';\nimport type { AccountInfo, Commitment, Connection } from '@solana/web3.js';\nimport { PublicKey } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenAccountNotFoundError,\n    TokenInvalidAccountOwnerError,\n    TokenInvalidAccountSizeError,\n    TokenInvalidMintError,\n    TokenOwnerOffCurveError,\n} from '../errors.js';\nimport { ACCOUNT_TYPE_SIZE, AccountType } from '../extensions/accountType.js';\nimport type { ExtensionType } from '../extensions/extensionType.js';\nimport { getMintLen } from '../extensions/extensionType.js';\nimport { ACCOUNT_SIZE } from './account.js';\nimport { MULTISIG_SIZE } from './multisig.js';\n\n/** Information about a mint */\nexport interface Mint {\n    /** Address of the mint */\n    address: PublicKey;\n    /**\n     * Optional authority used to mint new tokens. The mint authority may only be provided during mint creation.\n     * If no mint authority is present then the mint has a fixed supply and no further tokens may be minted.\n     */\n    mintAuthority: PublicKey | null;\n    /** Total supply of tokens */\n    supply: bigint;\n    /** Number of base 10 digits to the right of the decimal place */\n    decimals: number;\n    /** Is this mint initialized */\n    isInitialized: boolean;\n    /** Optional authority to freeze token accounts */\n    freezeAuthority: PublicKey | null;\n    /** Additional data for extension */\n    tlvData: Buffer;\n}\n\n/** Mint as stored by the program */\nexport interface RawMint {\n    mintAuthorityOption: 1 | 0;\n    mintAuthority: PublicKey;\n    supply: bigint;\n    decimals: number;\n    isInitialized: boolean;\n    freezeAuthorityOption: 1 | 0;\n    freezeAuthority: PublicKey;\n}\n\n/** Buffer layout for de/serializing a mint */\nexport const MintLayout = struct<RawMint>([\n    u32('mintAuthorityOption'),\n    publicKey('mintAuthority'),\n    u64('supply'),\n    u8('decimals'),\n    bool('isInitialized'),\n    u32('freezeAuthorityOption'),\n    publicKey('freezeAuthority'),\n]);\n\n/** Byte length of a mint */\nexport const MINT_SIZE = MintLayout.span;\n\n/**\n * Retrieve information about a mint\n *\n * @param connection Connection to use\n * @param address    Mint account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Mint information\n */\nexport async function getMint(\n    connection: Connection,\n    address: PublicKey,\n    commitment?: Commitment,\n    programId = TOKEN_PROGRAM_ID,\n): Promise<Mint> {\n    const info = await connection.getAccountInfo(address, commitment);\n    return unpackMint(address, info, programId);\n}\n\n/**\n * Unpack a mint\n *\n * @param address   Mint account\n * @param info      Mint account data\n * @param programId SPL Token program account\n *\n * @return Unpacked mint\n */\nexport function unpackMint(address: PublicKey, info: AccountInfo<Buffer> | null, programId = TOKEN_PROGRAM_ID): Mint {\n    if (!info) throw new TokenAccountNotFoundError();\n    if (!info.owner.equals(programId)) throw new TokenInvalidAccountOwnerError();\n    if (info.data.length < MINT_SIZE) throw new TokenInvalidAccountSizeError();\n\n    const rawMint = MintLayout.decode(info.data.slice(0, MINT_SIZE));\n    let tlvData = Buffer.alloc(0);\n    if (info.data.length > MINT_SIZE) {\n        if (info.data.length <= ACCOUNT_SIZE) throw new TokenInvalidAccountSizeError();\n        if (info.data.length === MULTISIG_SIZE) throw new TokenInvalidAccountSizeError();\n        if (info.data[ACCOUNT_SIZE] != AccountType.Mint) throw new TokenInvalidMintError();\n        tlvData = info.data.slice(ACCOUNT_SIZE + ACCOUNT_TYPE_SIZE);\n    }\n\n    return {\n        address,\n        mintAuthority: rawMint.mintAuthorityOption ? rawMint.mintAuthority : null,\n        supply: rawMint.supply,\n        decimals: rawMint.decimals,\n        isInitialized: rawMint.isInitialized,\n        freezeAuthority: rawMint.freezeAuthorityOption ? rawMint.freezeAuthority : null,\n        tlvData,\n    };\n}\n\n/** Get the minimum lamport balance for a mint to be rent exempt\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptMint(\n    connection: Connection,\n    commitment?: Commitment,\n): Promise<number> {\n    return await getMinimumBalanceForRentExemptMintWithExtensions(connection, [], commitment);\n}\n\n/** Get the minimum lamport balance for a rent-exempt mint with extensions\n *\n * @param connection Connection to use\n * @param extensions Extension types included in the mint\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptMintWithExtensions(\n    connection: Connection,\n    extensions: ExtensionType[],\n    commitment?: Commitment,\n): Promise<number> {\n    const mintLen = getMintLen(extensions);\n    return await connection.getMinimumBalanceForRentExemption(mintLen, commitment);\n}\n\n/**\n * Async version of getAssociatedTokenAddressSync\n * For backwards compatibility\n *\n * @param mint                     Token mint account\n * @param owner                    Owner of the new account\n * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Promise containing the address of the associated token account\n */\nexport async function getAssociatedTokenAddress(\n    mint: PublicKey,\n    owner: PublicKey,\n    allowOwnerOffCurve = false,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID,\n): Promise<PublicKey> {\n    if (!allowOwnerOffCurve && !PublicKey.isOnCurve(owner.toBuffer())) throw new TokenOwnerOffCurveError();\n\n    const [address] = await PublicKey.findProgramAddress(\n        [owner.toBuffer(), programId.toBuffer(), mint.toBuffer()],\n        associatedTokenProgramId,\n    );\n\n    return address;\n}\n\n/**\n * Get the address of the associated token account for a given mint and owner\n *\n * @param mint                     Token mint account\n * @param owner                    Owner of the new account\n * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Address of the associated token account\n */\nexport function getAssociatedTokenAddressSync(\n    mint: PublicKey,\n    owner: PublicKey,\n    allowOwnerOffCurve = false,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID,\n): PublicKey {\n    if (!allowOwnerOffCurve && !PublicKey.isOnCurve(owner.toBuffer())) throw new TokenOwnerOffCurveError();\n\n    const [address] = PublicKey.findProgramAddressSync(\n        [owner.toBuffer(), programId.toBuffer(), mint.toBuffer()],\n        associatedTokenProgramId,\n    );\n\n    return address;\n}\n","import type { Commitment, ConfirmOptions, Connection, PublicKey, Signer } from '@solana/web3.js';\nimport { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenAccountNotFoundError,\n    TokenInvalidAccountOwnerError,\n    TokenInvalidMintError,\n    TokenInvalidOwnerError,\n} from '../errors.js';\nimport { createAssociatedTokenAccountInstruction } from '../instructions/associatedTokenAccount.js';\nimport type { Account } from '../state/account.js';\nimport { getAccount } from '../state/account.js';\nimport { getAssociatedTokenAddressSync } from '../state/mint.js';\n\n/**\n * Retrieve the associated token account, or create it if it doesn't exist\n *\n * @param connection               Connection to use\n * @param payer                    Payer of the transaction and initialization fees\n * @param mint                     Mint associated with the account to set or verify\n * @param owner                    Owner of the account to set or verify\n * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)\n * @param commitment               Desired level of commitment for querying the state\n * @param confirmOptions           Options for confirming the transaction\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Address of the new associated token account\n */\nexport async function getOrCreateAssociatedTokenAccount(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    owner: PublicKey,\n    allowOwnerOffCurve = false,\n    commitment?: Commitment,\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID,\n): Promise<Account> {\n    const associatedToken = getAssociatedTokenAddressSync(\n        mint,\n        owner,\n        allowOwnerOffCurve,\n        programId,\n        associatedTokenProgramId,\n    );\n\n    // This is the optimal logic, considering TX fee, client-side computation, RPC roundtrips and guaranteed idempotent.\n    // Sadly we can't do this atomically.\n    let account: Account;\n    try {\n        account = await getAccount(connection, associatedToken, commitment, programId);\n    } catch (error: unknown) {\n        // TokenAccountNotFoundError can be possible if the associated address has already received some lamports,\n        // becoming a system account. Assuming program derived addressing is safe, this is the only case for the\n        // TokenInvalidAccountOwnerError in this code path.\n        if (error instanceof TokenAccountNotFoundError || error instanceof TokenInvalidAccountOwnerError) {\n            // As this isn't atomic, it's possible others can create associated accounts meanwhile.\n            try {\n                const transaction = new Transaction().add(\n                    createAssociatedTokenAccountInstruction(\n                        payer.publicKey,\n                        associatedToken,\n                        owner,\n                        mint,\n                        programId,\n                        associatedTokenProgramId,\n                    ),\n                );\n\n                await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n            } catch (error: unknown) {\n                // Ignore all errors; for now there is no API-compatible way to selectively ignore the expected\n                // instruction error if the associated account exists already.\n            }\n\n            // Now this should always succeed\n            account = await getAccount(connection, associatedToken, commitment, programId);\n        } else {\n            throw error;\n        }\n    }\n\n    if (!account.mint.equals(mint)) throw new TokenInvalidMintError();\n    if (!account.owner.equals(owner)) throw new TokenInvalidOwnerError();\n\n    return account;\n}\n","import type { AccountMeta, Signer } from '@solana/web3.js';\nimport { PublicKey } from '@solana/web3.js';\n\n/** @internal */\nexport function addSigners(\n    keys: AccountMeta[],\n    ownerOrAuthority: PublicKey,\n    multiSigners: (Signer | PublicKey)[],\n): AccountMeta[] {\n    if (multiSigners.length) {\n        keys.push({ pubkey: ownerOrAuthority, isSigner: false, isWritable: false });\n        for (const signer of multiSigners) {\n            keys.push({\n                pubkey: signer instanceof PublicKey ? signer : signer.publicKey,\n                isSigner: true,\n                isWritable: false,\n            });\n        }\n    } else {\n        keys.push({ pubkey: ownerOrAuthority, isSigner: true, isWritable: false });\n    }\n    return keys;\n}\n","/** Instructions defined by the program */\nexport enum TokenInstruction {\n    InitializeMint = 0,\n    InitializeAccount = 1,\n    InitializeMultisig = 2,\n    Transfer = 3,\n    Approve = 4,\n    Revoke = 5,\n    SetAuthority = 6,\n    MintTo = 7,\n    Burn = 8,\n    CloseAccount = 9,\n    FreezeAccount = 10,\n    ThawAccount = 11,\n    TransferChecked = 12,\n    ApproveChecked = 13,\n    MintToChecked = 14,\n    BurnChecked = 15,\n    InitializeAccount2 = 16,\n    SyncNative = 17,\n    InitializeAccount3 = 18,\n    InitializeMultisig2 = 19,\n    InitializeMint2 = 20,\n    GetAccountDataSize = 21,\n    InitializeImmutableOwner = 22,\n    AmountToUiAmount = 23,\n    UiAmountToAmount = 24,\n    InitializeMintCloseAuthority = 25,\n    TransferFeeExtension = 26,\n    ConfidentialTransferExtension = 27,\n    DefaultAccountStateExtension = 28,\n    Reallocate = 29,\n    MemoTransferExtension = 30,\n    CreateNativeMint = 31,\n    InitializeNonTransferableMint = 32,\n    InterestBearingMintExtension = 33,\n    CpiGuardExtension = 34,\n    InitializePermanentDelegate = 35,\n    TransferHookExtension = 36,\n    // ConfidentialTransferFeeExtension = 37,\n    // WithdrawalExcessLamports = 38,\n    MetadataPointerExtension = 39,\n    GroupPointerExtension = 40,\n    GroupMemberPointerExtension = 41,\n    // ConfidentialMintBurnExtension = 42,\n    ScaledUiAmountExtension = 43,\n    PausableExtension = 44,\n}\n","import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport type { AccountMeta, PublicKey, Signer } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface TransferInstructionData {\n    instruction: TokenInstruction.Transfer;\n    amount: bigint;\n}\n\n/** TODO: docs */\nexport const transferInstructionData = struct<TransferInstructionData>([u8('instruction'), u64('amount')]);\n\n/**\n * Construct a Transfer instruction\n *\n * @param source       Source account\n * @param destination  Destination account\n * @param owner        Owner of the source account\n * @param amount       Number of tokens to transfer\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createTransferInstruction(\n    source: PublicKey,\n    destination: PublicKey,\n    owner: PublicKey,\n    amount: number | bigint,\n    multiSigners: (Signer | PublicKey)[] = [],\n    programId = TOKEN_PROGRAM_ID,\n): TransactionInstruction {\n    const keys = addSigners(\n        [\n            { pubkey: source, isSigner: false, isWritable: true },\n            { pubkey: destination, isSigner: false, isWritable: true },\n        ],\n        owner,\n        multiSigners,\n    );\n\n    const data = Buffer.alloc(transferInstructionData.span);\n    transferInstructionData.encode(\n        {\n            instruction: TokenInstruction.Transfer,\n            amount: BigInt(amount),\n        },\n        data,\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid Transfer instruction */\nexport interface DecodedTransferInstruction {\n    programId: PublicKey;\n    keys: {\n        source: AccountMeta;\n        destination: AccountMeta;\n        owner: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.Transfer;\n        amount: bigint;\n    };\n}\n\n/**\n * Decode a Transfer instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeTransferInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID,\n): DecodedTransferInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== transferInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { source, destination, owner, multiSigners },\n        data,\n    } = decodeTransferInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.Transfer) throw new TokenInvalidInstructionTypeError();\n    if (!source || !destination || !owner) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            source,\n            destination,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated Transfer instruction */\nexport interface DecodedTransferInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        source: AccountMeta | undefined;\n        destination: AccountMeta | undefined;\n        owner: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n        amount: bigint;\n    };\n}\n\n/**\n * Decode a Transfer instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeTransferInstructionUnchecked({\n    programId,\n    keys: [source, destination, owner, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedTransferInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            source,\n            destination,\n            owner,\n            multiSigners,\n        },\n        data: transferInstructionData.decode(data),\n    };\n}\n","import { struct, u8 } from '@solana/buffer-layout';\nimport type { AccountMeta, PublicKey, Signer } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface CloseAccountInstructionData {\n    instruction: TokenInstruction.CloseAccount;\n}\n\n/** TODO: docs */\nexport const closeAccountInstructionData = struct<CloseAccountInstructionData>([u8('instruction')]);\n\n/**\n * Construct a CloseAccount instruction\n *\n * @param account      Account to close\n * @param destination  Account to receive the remaining balance of the closed account\n * @param authority    Account close authority\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createCloseAccountInstruction(\n    account: PublicKey,\n    destination: PublicKey,\n    authority: PublicKey,\n    multiSigners: (Signer | PublicKey)[] = [],\n    programId = TOKEN_PROGRAM_ID,\n): TransactionInstruction {\n    const keys = addSigners(\n        [\n            { pubkey: account, isSigner: false, isWritable: true },\n            { pubkey: destination, isSigner: false, isWritable: true },\n        ],\n        authority,\n        multiSigners,\n    );\n\n    const data = Buffer.alloc(closeAccountInstructionData.span);\n    closeAccountInstructionData.encode({ instruction: TokenInstruction.CloseAccount }, data);\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid CloseAccount instruction */\nexport interface DecodedCloseAccountInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        destination: AccountMeta;\n        authority: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.CloseAccount;\n    };\n}\n\n/**\n * Decode a CloseAccount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeCloseAccountInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID,\n): DecodedCloseAccountInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== closeAccountInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, destination, authority, multiSigners },\n        data,\n    } = decodeCloseAccountInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.CloseAccount) throw new TokenInvalidInstructionTypeError();\n    if (!account || !destination || !authority) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            destination,\n            authority,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated CloseAccount instruction */\nexport interface DecodedCloseAccountInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        destination: AccountMeta | undefined;\n        authority: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n    };\n}\n\n/**\n * Decode a CloseAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeCloseAccountInstructionUnchecked({\n    programId,\n    keys: [account, destination, authority, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedCloseAccountInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n            destination,\n            authority,\n            multiSigners,\n        },\n        data: closeAccountInstructionData.decode(data),\n    };\n}\n","import { struct, u8 } from '@solana/buffer-layout';\nimport type { AccountMeta, PublicKey } from '@solana/web3.js';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors.js';\nimport { TokenInstruction } from './types.js';\n\n/** TODO: docs */\nexport interface SyncNativeInstructionData {\n    instruction: TokenInstruction.SyncNative;\n}\n\n/** TODO: docs */\nexport const syncNativeInstructionData = struct<SyncNativeInstructionData>([u8('instruction')]);\n\n/**\n * Construct a SyncNative instruction\n *\n * @param account   Native account to sync lamports from\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createSyncNativeInstruction(account: PublicKey, programId = TOKEN_PROGRAM_ID): TransactionInstruction {\n    const keys = [{ pubkey: account, isSigner: false, isWritable: true }];\n\n    const data = Buffer.alloc(syncNativeInstructionData.span);\n    syncNativeInstructionData.encode({ instruction: TokenInstruction.SyncNative }, data);\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid SyncNative instruction */\nexport interface DecodedSyncNativeInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n    };\n    data: {\n        instruction: TokenInstruction.SyncNative;\n    };\n}\n\n/**\n * Decode a SyncNative instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeSyncNativeInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID,\n): DecodedSyncNativeInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== syncNativeInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account },\n        data,\n    } = decodeSyncNativeInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.SyncNative) throw new TokenInvalidInstructionTypeError();\n    if (!account) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated SyncNative instruction */\nexport interface DecodedSyncNativeInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n    };\n    data: {\n        instruction: number;\n    };\n}\n\n/**\n * Decode a SyncNative instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeSyncNativeInstructionUnchecked({\n    programId,\n    keys: [account],\n    data,\n}: TransactionInstruction): DecodedSyncNativeInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n        },\n        data: syncNativeInstructionData.decode(data),\n    };\n}\n"],"names":["exports","buf","reversed","Buffer","from","reverse","hex","toString","length","BigInt","concat","num","width","buffer","padStart","slice","TokenError","Error","constructor","message","super","TokenAccountNotFoundError","name","TokenInvalidAccountError","TokenInvalidAccountOwnerError","TokenInvalidAccountSizeError","TokenInvalidMintError","TokenInvalidOwnerError","TokenOwnerOffCurveError","createAssociatedTokenAccountInstruction","payer","associatedToken","owner","mint","programId","arguments","undefined","TOKEN_PROGRAM_ID","associatedTokenProgramId","ASSOCIATED_TOKEN_PROGRAM_ID","buildAssociatedTokenAccountInstruction","alloc","instructionData","keys","pubkey","isSigner","isWritable","SystemProgram","TransactionInstruction","data","encodeDecode","layout","decode","bind","encode","bigInt","property","blob","bigIntLayout","offset","src","toBigIntLE","toBufferLE","bigIntBE","toBigIntBE","toBufferBE","u64","isNumeric","mathceil","Math","ceil","mathfloor","floor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","bitFloor","n","i","coeffToString","a","s","z","j","r","charCodeAt","compare","x","y","b","xc","c","yc","k","e","l","intCheck","min","max","String","isOdd","toExponential","str","charAt","toFixedPoint","len","zs","BigNumber","clone","configObject","div","convertBase","parseNumeric","P","prototype","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","alphabetHasNormalDecimalDigits","v","alphabet","caseChanged","isNum","this","_isBigNumber","test","indexOf","replace","search","substring","round","DEBUG","toUpperCase","toLowerCase","push","format","rm","id","c0","ne","maxOrMin","args","normalise","pop","sd","d","ni","rd","pows10","out","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","set","obj","p","hasOwnProperty","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","call","maximum","minimum","random","pow2_53","random53bitInt","dp","rand","Uint32Array","copy","splice","sum","plus","decimal","toBaseOut","baseIn","baseOut","arrL","arr","sign","callerIsToString","pow","multiply","base","m","temp","xlo","xhi","carry","klo","khi","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","NaN","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","isNaN","p1","p2","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","mod","times","integerValue","isEqualTo","eq","isFinite","isGreaterThan","gt","isGreaterThanOrEqualTo","gte","isLessThan","lt","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","t","xLTy","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","split","g1","g2","intPart","fractionPart","isNeg","intDigits","substr","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","toJSON","Symbol","toStringTag","for","bool","u8","boolLayout","Number","publicKey","publicKeyLayout","PublicKey","toBuffer","AccountType","ACCOUNT_TYPE_SIZE","MultisigLayout","struct","MULTISIG_SIZE","span","AccountState","AccountLayout","u32","ACCOUNT_SIZE","async","getAccount","connection","address","commitment","unpackAccount","getAccountInfo","info","equals","rawAccount","tlvData","Account","amount","delegate","delegateOption","delegatedAmount","isInitialized","state","Uninitialized","isFrozen","Frozen","isNative","isNativeOption","rentExemptReserve","closeAuthority","closeAuthorityOption","MintLayout","MINT_SIZE","getMint","rawMint","Mint","mintAuthority","mintAuthorityOption","supply","decimals","freezeAuthority","freezeAuthorityOption","unpackMint","getAssociatedTokenAddress","allowOwnerOffCurve","isOnCurve","findProgramAddress","getOrCreateAssociatedTokenAccount","confirmOptions","findProgramAddressSync","getAssociatedTokenAddressSync","account","error","transaction","Transaction","add","sendAndConfirmTransaction","addSigners","ownerOrAuthority","multiSigners","signer","TokenInstruction","transferInstructionData","createTransferInstruction","source","destination","instruction","Transfer","closeAccountInstructionData","createCloseAccountInstruction","authority","CloseAccount","syncNativeInstructionData","createSyncNativeInstruction","SyncNative"],"sourceRoot":""}